# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyCovertAudio_lib', [dirname(__file__)])
        except ImportError:
            import _pyCovertAudio_lib
            return _pyCovertAudio_lib
        if fp is not None:
            try:
                _mod = imp.load_module('_pyCovertAudio_lib', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyCovertAudio_lib = swig_import_helper()
    del swig_import_helper
else:
    import _pyCovertAudio_lib
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


MAJOR_VERSION = _pyCovertAudio_lib.MAJOR_VERSION
MINOR_VERSION = _pyCovertAudio_lib.MINOR_VERSION
LIBRARY_NAME = _pyCovertAudio_lib.LIBRARY_NAME
CAHAL_STATE_NOT_INITIALIZED = _pyCovertAudio_lib.CAHAL_STATE_NOT_INITIALIZED
CAHAL_STATE_INITIALIZED = _pyCovertAudio_lib.CAHAL_STATE_INITIALIZED
CAHAL_STATE_TERMINATED = _pyCovertAudio_lib.CAHAL_STATE_TERMINATED

def cahal_get_version():
  return _pyCovertAudio_lib.cahal_get_version()
cahal_get_version = _pyCovertAudio_lib.cahal_get_version

def cahal_get_version_string():
  return _pyCovertAudio_lib.cahal_get_version_string()
cahal_get_version_string = _pyCovertAudio_lib.cahal_get_version_string

def cahal_initialize():
  return _pyCovertAudio_lib.cahal_initialize()
cahal_initialize = _pyCovertAudio_lib.cahal_initialize

def cahal_terminate():
  return _pyCovertAudio_lib.cahal_terminate()
cahal_terminate = _pyCovertAudio_lib.cahal_terminate

def cahal_sleep(*args):
  return _pyCovertAudio_lib.cahal_sleep(*args)
cahal_sleep = _pyCovertAudio_lib.cahal_sleep
CAHAL_AUDIO_FORMAT_FLAGISFLOAT = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_FLAGISFLOAT
CAHAL_AUDIO_FORMAT_FLAGISBIGENDIAN = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_FLAGISBIGENDIAN
CAHAL_AUDIO_FORMAT_FLAGISSIGNEDINTEGER = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_FLAGISSIGNEDINTEGER
CAHAL_AUDIO_FORMAT_FLAGISPACKED = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_FLAGISPACKED
CAHAL_AUDIO_FORMAT_FLAGISALIGNEDHIGH = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_FLAGISALIGNEDHIGH
CAHAL_AUDIO_FORMAT_FLAGISNONINTERLEAVED = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_FLAGISNONINTERLEAVED
CAHAL_AUDIO_FORMAT_FLAGISNONMIXABLE = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_FLAGISNONMIXABLE
CAHAL_AUDIO_FORMAT_FLAGSAREALLCLEAR = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_FLAGSAREALLCLEAR
CAHAL_AUDIO_FORMAT_FLAGUNKNOWN = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_FLAGUNKNOWN
CAHAL_AUDIO_FORMAT_STRING_FLAGISNONINTERLEAVED = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_FLAGISNONINTERLEAVED
CAHAL_AUDIO_FORMAT_STRING_FLAGSAREALLCLEAR = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_FLAGSAREALLCLEAR
CAHAL_AUDIO_FORMAT_STRING_FLAGISFLOAT = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_FLAGISFLOAT
CAHAL_AUDIO_FORMAT_STRING_FLAGISBIGENDIAN = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_FLAGISBIGENDIAN
CAHAL_AUDIO_FORMAT_STRING_FLAGISPACKED = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_FLAGISPACKED
CAHAL_AUDIO_FORMAT_STRING_FLAGISNONMIXABLE = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_FLAGISNONMIXABLE
CAHAL_AUDIO_FORMAT_STRING_FLAGISALIGNEDHIGH = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_FLAGISALIGNEDHIGH
CAHAL_AUDIO_FORMAT_STRING_FLAGISSIGNEDINTEGER = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_FLAGISSIGNEDINTEGER

def cahal_convert_audio_format_flag_to_cstring(*args):
  return _pyCovertAudio_lib.cahal_convert_audio_format_flag_to_cstring(*args)
cahal_convert_audio_format_flag_to_cstring = _pyCovertAudio_lib.cahal_convert_audio_format_flag_to_cstring

def cahal_print_audio_format_flag(*args):
  return _pyCovertAudio_lib.cahal_print_audio_format_flag(*args)
cahal_print_audio_format_flag = _pyCovertAudio_lib.cahal_print_audio_format_flag
CAHAL_AUDIO_FORMAT_STRING_MACE6 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_MACE6
CAHAL_AUDIO_FORMAT_STRING_QUALCOMM = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_QUALCOMM
CAHAL_AUDIO_FORMAT_STRING_MPEG4TWINVQ = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_MPEG4TWINVQ
CAHAL_AUDIO_FORMAT_STRING_MPEG4AAC_ELD_V2 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_MPEG4AAC_ELD_V2
CAHAL_AUDIO_FORMAT_STRING_MPEG4AAC_LD = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_MPEG4AAC_LD
CAHAL_AUDIO_FORMAT_STRING_PARAMETERVALUESTREAM = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_PARAMETERVALUESTREAM
CAHAL_AUDIO_FORMAT_STRING_MPEG4AAC_SPATIAL = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_MPEG4AAC_SPATIAL
CAHAL_AUDIO_FORMAT_STRING_MICROSOFTGSM = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_MICROSOFTGSM
CAHAL_AUDIO_FORMAT_STRING_60958AC3 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_60958AC3
CAHAL_AUDIO_FORMAT_STRING_MPEG4CELP = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_MPEG4CELP
CAHAL_AUDIO_FORMAT_STRING_MPEG4HVXC = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_MPEG4HVXC
CAHAL_AUDIO_FORMAT_STRING_QDESIGN2 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_QDESIGN2
CAHAL_AUDIO_FORMAT_STRING_MPEGLAYER1 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_MPEGLAYER1
CAHAL_AUDIO_FORMAT_STRING_ILBC = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_ILBC
CAHAL_AUDIO_FORMAT_STRING_APPLELOSSLESS = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_APPLELOSSLESS
CAHAL_AUDIO_FORMAT_STRING_MPEG4AAC_ELD = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_MPEG4AAC_ELD
CAHAL_AUDIO_FORMAT_STRING_AES3 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_AES3
CAHAL_AUDIO_FORMAT_STRING_ALAW = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_ALAW
CAHAL_AUDIO_FORMAT_STRING_MPEG4AAC_HE = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_MPEG4AAC_HE
CAHAL_AUDIO_FORMAT_STRING_DVIINTELIMA = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_DVIINTELIMA
CAHAL_AUDIO_FORMAT_STRING_QDESIGN = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_QDESIGN
CAHAL_AUDIO_FORMAT_STRING_TIMECODE = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_TIMECODE
CAHAL_AUDIO_FORMAT_STRING_AC3 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_AC3
CAHAL_AUDIO_FORMAT_STRING_AUDIBLE = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_AUDIBLE
CAHAL_AUDIO_FORMAT_STRING_LINEARPCM = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_LINEARPCM
CAHAL_AUDIO_FORMAT_STRING_MPEG4AAC_ELD_SBR = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_MPEG4AAC_ELD_SBR
CAHAL_AUDIO_FORMAT_STRING_ULAW = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_ULAW
CAHAL_AUDIO_FORMAT_STRING_MPEG4AAC_HE_V2 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_MPEG4AAC_HE_V2
CAHAL_AUDIO_FORMAT_STRING_APPLEIMA4 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_APPLEIMA4
CAHAL_AUDIO_FORMAT_STRING_MIDISTREAM = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_MIDISTREAM
CAHAL_AUDIO_FORMAT_STRING_AMR = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_AMR
CAHAL_AUDIO_FORMAT_STRING_MPEG4AAC = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_MPEG4AAC
CAHAL_AUDIO_FORMAT_STRING_MPEGLAYER2 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_MPEGLAYER2
CAHAL_AUDIO_FORMAT_STRING_MPEGLAYER3 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_MPEGLAYER3
CAHAL_AUDIO_FORMAT_STRING_MACE3 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_STRING_MACE3
CAHAL_AUDIO_FORMAT_LINEARPCM = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_LINEARPCM
CAHAL_AUDIO_FORMAT_AC3 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_AC3
CAHAL_AUDIO_FORMAT_60958AC3 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_60958AC3
CAHAL_AUDIO_FORMAT_APPLEIMA4 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_APPLEIMA4
CAHAL_AUDIO_FORMAT_MPEG4AAC = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_MPEG4AAC
CAHAL_AUDIO_FORMAT_MPEG4CELP = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_MPEG4CELP
CAHAL_AUDIO_FORMAT_MPEG4HVXC = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_MPEG4HVXC
CAHAL_AUDIO_FORMAT_MPEG4TWINVQ = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_MPEG4TWINVQ
CAHAL_AUDIO_FORMAT_MACE3 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_MACE3
CAHAL_AUDIO_FORMAT_MACE6 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_MACE6
CAHAL_AUDIO_FORMAT_ULAW = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_ULAW
CAHAL_AUDIO_FORMAT_ALAW = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_ALAW
CAHAL_AUDIO_FORMAT_QDESIGN = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_QDESIGN
CAHAL_AUDIO_FORMAT_QDESIGN2 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_QDESIGN2
CAHAL_AUDIO_FORMAT_QUALCOMM = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_QUALCOMM
CAHAL_AUDIO_FORMAT_MPEGLAYER1 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_MPEGLAYER1
CAHAL_AUDIO_FORMAT_MPEGLAYER2 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_MPEGLAYER2
CAHAL_AUDIO_FORMAT_MPEGLAYER3 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_MPEGLAYER3
CAHAL_AUDIO_FORMAT_TIMECODE = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_TIMECODE
CAHAL_AUDIO_FORMAT_MIDISTREAM = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_MIDISTREAM
CAHAL_AUDIO_FORMAT_PARAMETERVALUESTREAM = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_PARAMETERVALUESTREAM
CAHAL_AUDIO_FORMAT_APPLELOSSLESS = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_APPLELOSSLESS
CAHAL_AUDIO_FORMAT_MPEG4AAC_HE = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_MPEG4AAC_HE
CAHAL_AUDIO_FORMAT_MPEG4AAC_LD = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_MPEG4AAC_LD
CAHAL_AUDIO_FORMAT_MPEG4AAC_ELD = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_MPEG4AAC_ELD
CAHAL_AUDIO_FORMAT_MPEG4AAC_ELD_SBR = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_MPEG4AAC_ELD_SBR
CAHAL_AUDIO_FORMAT_MPEG4AAC_ELD_V2 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_MPEG4AAC_ELD_V2
CAHAL_AUDIO_FORMAT_MPEG4AAC_HE_V2 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_MPEG4AAC_HE_V2
CAHAL_AUDIO_FORMAT_MPEG4AAC_SPATIAL = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_MPEG4AAC_SPATIAL
CAHAL_AUDIO_FORMAT_AMR = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_AMR
CAHAL_AUDIO_FORMAT_AUDIBLE = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_AUDIBLE
CAHAL_AUDIO_FORMAT_ILBC = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_ILBC
CAHAL_AUDIO_FORMAT_DVIINTELIMA = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_DVIINTELIMA
CAHAL_AUDIO_FORMAT_MICROSOFTGSM = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_MICROSOFTGSM
CAHAL_AUDIO_FORMAT_AES3 = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_AES3
CAHAL_AUDIO_FORMAT_UNKNOWN = _pyCovertAudio_lib.CAHAL_AUDIO_FORMAT_UNKNOWN
class cahal_sample_rate_range(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cahal_sample_rate_range, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cahal_sample_rate_range, name)
    __repr__ = _swig_repr
    __swig_setmethods__["minimum_rate"] = _pyCovertAudio_lib.cahal_sample_rate_range_minimum_rate_set
    __swig_getmethods__["minimum_rate"] = _pyCovertAudio_lib.cahal_sample_rate_range_minimum_rate_get
    if _newclass:minimum_rate = _swig_property(_pyCovertAudio_lib.cahal_sample_rate_range_minimum_rate_get, _pyCovertAudio_lib.cahal_sample_rate_range_minimum_rate_set)
    __swig_setmethods__["maximum_rate"] = _pyCovertAudio_lib.cahal_sample_rate_range_maximum_rate_set
    __swig_getmethods__["maximum_rate"] = _pyCovertAudio_lib.cahal_sample_rate_range_maximum_rate_get
    if _newclass:maximum_rate = _swig_property(_pyCovertAudio_lib.cahal_sample_rate_range_maximum_rate_get, _pyCovertAudio_lib.cahal_sample_rate_range_maximum_rate_set)
    def __init__(self): 
        this = _pyCovertAudio_lib.new_cahal_sample_rate_range()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyCovertAudio_lib.delete_cahal_sample_rate_range
    __del__ = lambda self : None;
cahal_sample_rate_range_swigregister = _pyCovertAudio_lib.cahal_sample_rate_range_swigregister
cahal_sample_rate_range_swigregister(cahal_sample_rate_range)
cvar = _pyCovertAudio_lib.cvar

class cahal_audio_format_description(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cahal_audio_format_description, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cahal_audio_format_description, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sample_rate_range"] = _pyCovertAudio_lib.cahal_audio_format_description_sample_rate_range_set
    __swig_getmethods__["sample_rate_range"] = _pyCovertAudio_lib.cahal_audio_format_description_sample_rate_range_get
    if _newclass:sample_rate_range = _swig_property(_pyCovertAudio_lib.cahal_audio_format_description_sample_rate_range_get, _pyCovertAudio_lib.cahal_audio_format_description_sample_rate_range_set)
    __swig_setmethods__["format_id"] = _pyCovertAudio_lib.cahal_audio_format_description_format_id_set
    __swig_getmethods__["format_id"] = _pyCovertAudio_lib.cahal_audio_format_description_format_id_get
    if _newclass:format_id = _swig_property(_pyCovertAudio_lib.cahal_audio_format_description_format_id_get, _pyCovertAudio_lib.cahal_audio_format_description_format_id_set)
    __swig_setmethods__["number_of_channels"] = _pyCovertAudio_lib.cahal_audio_format_description_number_of_channels_set
    __swig_getmethods__["number_of_channels"] = _pyCovertAudio_lib.cahal_audio_format_description_number_of_channels_get
    if _newclass:number_of_channels = _swig_property(_pyCovertAudio_lib.cahal_audio_format_description_number_of_channels_get, _pyCovertAudio_lib.cahal_audio_format_description_number_of_channels_set)
    __swig_setmethods__["bit_depth"] = _pyCovertAudio_lib.cahal_audio_format_description_bit_depth_set
    __swig_getmethods__["bit_depth"] = _pyCovertAudio_lib.cahal_audio_format_description_bit_depth_get
    if _newclass:bit_depth = _swig_property(_pyCovertAudio_lib.cahal_audio_format_description_bit_depth_get, _pyCovertAudio_lib.cahal_audio_format_description_bit_depth_set)
    def __init__(self): 
        this = _pyCovertAudio_lib.new_cahal_audio_format_description()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyCovertAudio_lib.delete_cahal_audio_format_description
    __del__ = lambda self : None;
cahal_audio_format_description_swigregister = _pyCovertAudio_lib.cahal_audio_format_description_swigregister
cahal_audio_format_description_swigregister(cahal_audio_format_description)


def cahal_convert_audio_format_id_to_cstring(*args):
  return _pyCovertAudio_lib.cahal_convert_audio_format_id_to_cstring(*args)
cahal_convert_audio_format_id_to_cstring = _pyCovertAudio_lib.cahal_convert_audio_format_id_to_cstring

def cahal_print_audio_format_description(*args):
  return _pyCovertAudio_lib.cahal_print_audio_format_description(*args)
cahal_print_audio_format_description = _pyCovertAudio_lib.cahal_print_audio_format_description

def cahal_print_audio_format_id(*args):
  return _pyCovertAudio_lib.cahal_print_audio_format_id(*args)
cahal_print_audio_format_id = _pyCovertAudio_lib.cahal_print_audio_format_id
CAHAL_QUEUE_BUFFER_DURATION = _pyCovertAudio_lib.CAHAL_QUEUE_BUFFER_DURATION
CAHAL_QUEUE_NUMBER_OF_QUEUES = _pyCovertAudio_lib.CAHAL_QUEUE_NUMBER_OF_QUEUES
class cahal_device(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cahal_device, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cahal_device, name)
    __repr__ = _swig_repr
    __swig_setmethods__["device_name"] = _pyCovertAudio_lib.cahal_device_device_name_set
    __swig_getmethods__["device_name"] = _pyCovertAudio_lib.cahal_device_device_name_get
    if _newclass:device_name = _swig_property(_pyCovertAudio_lib.cahal_device_device_name_get, _pyCovertAudio_lib.cahal_device_device_name_set)
    __swig_setmethods__["model"] = _pyCovertAudio_lib.cahal_device_model_set
    __swig_getmethods__["model"] = _pyCovertAudio_lib.cahal_device_model_get
    if _newclass:model = _swig_property(_pyCovertAudio_lib.cahal_device_model_get, _pyCovertAudio_lib.cahal_device_model_set)
    __swig_setmethods__["manufacturer"] = _pyCovertAudio_lib.cahal_device_manufacturer_set
    __swig_getmethods__["manufacturer"] = _pyCovertAudio_lib.cahal_device_manufacturer_get
    if _newclass:manufacturer = _swig_property(_pyCovertAudio_lib.cahal_device_manufacturer_get, _pyCovertAudio_lib.cahal_device_manufacturer_set)
    __swig_setmethods__["serial_number"] = _pyCovertAudio_lib.cahal_device_serial_number_set
    __swig_getmethods__["serial_number"] = _pyCovertAudio_lib.cahal_device_serial_number_get
    if _newclass:serial_number = _swig_property(_pyCovertAudio_lib.cahal_device_serial_number_get, _pyCovertAudio_lib.cahal_device_serial_number_set)
    __swig_setmethods__["version"] = _pyCovertAudio_lib.cahal_device_version_set
    __swig_getmethods__["version"] = _pyCovertAudio_lib.cahal_device_version_get
    if _newclass:version = _swig_property(_pyCovertAudio_lib.cahal_device_version_get, _pyCovertAudio_lib.cahal_device_version_set)
    __swig_setmethods__["device_uid"] = _pyCovertAudio_lib.cahal_device_device_uid_set
    __swig_getmethods__["device_uid"] = _pyCovertAudio_lib.cahal_device_device_uid_get
    if _newclass:device_uid = _swig_property(_pyCovertAudio_lib.cahal_device_device_uid_get, _pyCovertAudio_lib.cahal_device_device_uid_set)
    __swig_setmethods__["model_uid"] = _pyCovertAudio_lib.cahal_device_model_uid_set
    __swig_getmethods__["model_uid"] = _pyCovertAudio_lib.cahal_device_model_uid_get
    if _newclass:model_uid = _swig_property(_pyCovertAudio_lib.cahal_device_model_uid_get, _pyCovertAudio_lib.cahal_device_model_uid_set)
    __swig_setmethods__["preferred_sample_rate"] = _pyCovertAudio_lib.cahal_device_preferred_sample_rate_set
    __swig_getmethods__["preferred_sample_rate"] = _pyCovertAudio_lib.cahal_device_preferred_sample_rate_get
    if _newclass:preferred_sample_rate = _swig_property(_pyCovertAudio_lib.cahal_device_preferred_sample_rate_get, _pyCovertAudio_lib.cahal_device_preferred_sample_rate_set)
    __swig_setmethods__["supported_sample_rates"] = _pyCovertAudio_lib.cahal_device_supported_sample_rates_set
    __swig_getmethods__["supported_sample_rates"] = _pyCovertAudio_lib.cahal_device_supported_sample_rates_get
    if _newclass:supported_sample_rates = _swig_property(_pyCovertAudio_lib.cahal_device_supported_sample_rates_get, _pyCovertAudio_lib.cahal_device_supported_sample_rates_set)
    __swig_setmethods__["device_streams"] = _pyCovertAudio_lib.cahal_device_device_streams_set
    __swig_getmethods__["device_streams"] = _pyCovertAudio_lib.cahal_device_device_streams_get
    if _newclass:device_streams = _swig_property(_pyCovertAudio_lib.cahal_device_device_streams_get, _pyCovertAudio_lib.cahal_device_device_streams_set)
    __swig_setmethods__["handle"] = _pyCovertAudio_lib.cahal_device_handle_set
    __swig_getmethods__["handle"] = _pyCovertAudio_lib.cahal_device_handle_get
    if _newclass:handle = _swig_property(_pyCovertAudio_lib.cahal_device_handle_get, _pyCovertAudio_lib.cahal_device_handle_set)
    __swig_setmethods__["preferred_number_of_channels"] = _pyCovertAudio_lib.cahal_device_preferred_number_of_channels_set
    __swig_getmethods__["preferred_number_of_channels"] = _pyCovertAudio_lib.cahal_device_preferred_number_of_channels_get
    if _newclass:preferred_number_of_channels = _swig_property(_pyCovertAudio_lib.cahal_device_preferred_number_of_channels_get, _pyCovertAudio_lib.cahal_device_preferred_number_of_channels_set)
    __swig_setmethods__["is_alive"] = _pyCovertAudio_lib.cahal_device_is_alive_set
    __swig_getmethods__["is_alive"] = _pyCovertAudio_lib.cahal_device_is_alive_get
    if _newclass:is_alive = _swig_property(_pyCovertAudio_lib.cahal_device_is_alive_get, _pyCovertAudio_lib.cahal_device_is_alive_set)
    __swig_setmethods__["is_running"] = _pyCovertAudio_lib.cahal_device_is_running_set
    __swig_getmethods__["is_running"] = _pyCovertAudio_lib.cahal_device_is_running_get
    if _newclass:is_running = _swig_property(_pyCovertAudio_lib.cahal_device_is_running_get, _pyCovertAudio_lib.cahal_device_is_running_set)
    def __init__(self): 
        this = _pyCovertAudio_lib.new_cahal_device()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyCovertAudio_lib.delete_cahal_device
    __del__ = lambda self : None;
cahal_device_swigregister = _pyCovertAudio_lib.cahal_device_swigregister
cahal_device_swigregister(cahal_device)

class cahal_recorder_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cahal_recorder_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cahal_recorder_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["recording_device"] = _pyCovertAudio_lib.cahal_recorder_info_recording_device_set
    __swig_getmethods__["recording_device"] = _pyCovertAudio_lib.cahal_recorder_info_recording_device_get
    if _newclass:recording_device = _swig_property(_pyCovertAudio_lib.cahal_recorder_info_recording_device_get, _pyCovertAudio_lib.cahal_recorder_info_recording_device_set)
    __swig_setmethods__["recording_callback"] = _pyCovertAudio_lib.cahal_recorder_info_recording_callback_set
    __swig_getmethods__["recording_callback"] = _pyCovertAudio_lib.cahal_recorder_info_recording_callback_get
    if _newclass:recording_callback = _swig_property(_pyCovertAudio_lib.cahal_recorder_info_recording_callback_get, _pyCovertAudio_lib.cahal_recorder_info_recording_callback_set)
    __swig_setmethods__["user_data"] = _pyCovertAudio_lib.cahal_recorder_info_user_data_set
    __swig_getmethods__["user_data"] = _pyCovertAudio_lib.cahal_recorder_info_user_data_get
    if _newclass:user_data = _swig_property(_pyCovertAudio_lib.cahal_recorder_info_user_data_get, _pyCovertAudio_lib.cahal_recorder_info_user_data_set)
    __swig_setmethods__["platform_data"] = _pyCovertAudio_lib.cahal_recorder_info_platform_data_set
    __swig_getmethods__["platform_data"] = _pyCovertAudio_lib.cahal_recorder_info_platform_data_get
    if _newclass:platform_data = _swig_property(_pyCovertAudio_lib.cahal_recorder_info_platform_data_get, _pyCovertAudio_lib.cahal_recorder_info_platform_data_set)
    def __init__(self): 
        this = _pyCovertAudio_lib.new_cahal_recorder_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyCovertAudio_lib.delete_cahal_recorder_info
    __del__ = lambda self : None;
cahal_recorder_info_swigregister = _pyCovertAudio_lib.cahal_recorder_info_swigregister
cahal_recorder_info_swigregister(cahal_recorder_info)

class cahal_playback_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cahal_playback_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cahal_playback_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["playback_device"] = _pyCovertAudio_lib.cahal_playback_info_playback_device_set
    __swig_getmethods__["playback_device"] = _pyCovertAudio_lib.cahal_playback_info_playback_device_get
    if _newclass:playback_device = _swig_property(_pyCovertAudio_lib.cahal_playback_info_playback_device_get, _pyCovertAudio_lib.cahal_playback_info_playback_device_set)
    __swig_setmethods__["playback_callback"] = _pyCovertAudio_lib.cahal_playback_info_playback_callback_set
    __swig_getmethods__["playback_callback"] = _pyCovertAudio_lib.cahal_playback_info_playback_callback_get
    if _newclass:playback_callback = _swig_property(_pyCovertAudio_lib.cahal_playback_info_playback_callback_get, _pyCovertAudio_lib.cahal_playback_info_playback_callback_set)
    __swig_setmethods__["user_data"] = _pyCovertAudio_lib.cahal_playback_info_user_data_set
    __swig_getmethods__["user_data"] = _pyCovertAudio_lib.cahal_playback_info_user_data_get
    if _newclass:user_data = _swig_property(_pyCovertAudio_lib.cahal_playback_info_user_data_get, _pyCovertAudio_lib.cahal_playback_info_user_data_set)
    __swig_setmethods__["platform_data"] = _pyCovertAudio_lib.cahal_playback_info_platform_data_set
    __swig_getmethods__["platform_data"] = _pyCovertAudio_lib.cahal_playback_info_platform_data_get
    if _newclass:platform_data = _swig_property(_pyCovertAudio_lib.cahal_playback_info_platform_data_get, _pyCovertAudio_lib.cahal_playback_info_platform_data_set)
    def __init__(self): 
        this = _pyCovertAudio_lib.new_cahal_playback_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyCovertAudio_lib.delete_cahal_playback_info
    __del__ = lambda self : None;
cahal_playback_info_swigregister = _pyCovertAudio_lib.cahal_playback_info_swigregister
cahal_playback_info_swigregister(cahal_playback_info)


def cahal_print_device(*args):
  return _pyCovertAudio_lib.cahal_print_device(*args)
cahal_print_device = _pyCovertAudio_lib.cahal_print_device

def cahal_print_device_list(*args):
  return _pyCovertAudio_lib.cahal_print_device_list(*args)
cahal_print_device_list = _pyCovertAudio_lib.cahal_print_device_list

def cahal_get_device_list():
  return _pyCovertAudio_lib.cahal_get_device_list()
cahal_get_device_list = _pyCovertAudio_lib.cahal_get_device_list

def cahal_free_device_list():
  return _pyCovertAudio_lib.cahal_free_device_list()
cahal_free_device_list = _pyCovertAudio_lib.cahal_free_device_list

def cahal_test_device_direction_support(*args):
  return _pyCovertAudio_lib.cahal_test_device_direction_support(*args)
cahal_test_device_direction_support = _pyCovertAudio_lib.cahal_test_device_direction_support

def cahal_stop_recording():
  return _pyCovertAudio_lib.cahal_stop_recording()
cahal_stop_recording = _pyCovertAudio_lib.cahal_stop_recording

def cahal_stop_playback():
  return _pyCovertAudio_lib.cahal_stop_playback()
cahal_stop_playback = _pyCovertAudio_lib.cahal_stop_playback

def cahal_start_recording(*args):
  return _pyCovertAudio_lib.cahal_start_recording(*args)
cahal_start_recording = _pyCovertAudio_lib.cahal_start_recording

def cahal_start_playback(*args):
  return _pyCovertAudio_lib.cahal_start_playback(*args)
cahal_start_playback = _pyCovertAudio_lib.cahal_start_playback
CAHAL_DEVICE_OUTPUT_STREAM = _pyCovertAudio_lib.CAHAL_DEVICE_OUTPUT_STREAM
CAHAL_DEVICE_INPUT_STREAM = _pyCovertAudio_lib.CAHAL_DEVICE_INPUT_STREAM
class cahal_device_stream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cahal_device_stream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cahal_device_stream, name)
    __repr__ = _swig_repr
    __swig_setmethods__["supported_formats"] = _pyCovertAudio_lib.cahal_device_stream_supported_formats_set
    __swig_getmethods__["supported_formats"] = _pyCovertAudio_lib.cahal_device_stream_supported_formats_get
    if _newclass:supported_formats = _swig_property(_pyCovertAudio_lib.cahal_device_stream_supported_formats_get, _pyCovertAudio_lib.cahal_device_stream_supported_formats_set)
    __swig_setmethods__["handle"] = _pyCovertAudio_lib.cahal_device_stream_handle_set
    __swig_getmethods__["handle"] = _pyCovertAudio_lib.cahal_device_stream_handle_get
    if _newclass:handle = _swig_property(_pyCovertAudio_lib.cahal_device_stream_handle_get, _pyCovertAudio_lib.cahal_device_stream_handle_set)
    __swig_setmethods__["direction"] = _pyCovertAudio_lib.cahal_device_stream_direction_set
    __swig_getmethods__["direction"] = _pyCovertAudio_lib.cahal_device_stream_direction_get
    if _newclass:direction = _swig_property(_pyCovertAudio_lib.cahal_device_stream_direction_get, _pyCovertAudio_lib.cahal_device_stream_direction_set)
    __swig_setmethods__["preferred_format"] = _pyCovertAudio_lib.cahal_device_stream_preferred_format_set
    __swig_getmethods__["preferred_format"] = _pyCovertAudio_lib.cahal_device_stream_preferred_format_get
    if _newclass:preferred_format = _swig_property(_pyCovertAudio_lib.cahal_device_stream_preferred_format_get, _pyCovertAudio_lib.cahal_device_stream_preferred_format_set)
    def __init__(self): 
        this = _pyCovertAudio_lib.new_cahal_device_stream()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyCovertAudio_lib.delete_cahal_device_stream
    __del__ = lambda self : None;
cahal_device_stream_swigregister = _pyCovertAudio_lib.cahal_device_stream_swigregister
cahal_device_stream_swigregister(cahal_device_stream)


def cahal_print_device_stream_list(*args):
  return _pyCovertAudio_lib.cahal_print_device_stream_list(*args)
cahal_print_device_stream_list = _pyCovertAudio_lib.cahal_print_device_stream_list

def cahal_print_device_stream(*args):
  return _pyCovertAudio_lib.cahal_print_device_stream(*args)
cahal_print_device_stream = _pyCovertAudio_lib.cahal_print_device_stream

def cahal_free_device_stream_list(*args):
  return _pyCovertAudio_lib.cahal_free_device_stream_list(*args)
cahal_free_device_stream_list = _pyCovertAudio_lib.cahal_free_device_stream_list
CPC_TRUE = _pyCovertAudio_lib.CPC_TRUE
CPC_FALSE = _pyCovertAudio_lib.CPC_FALSE
MIN_USIZE = _pyCovertAudio_lib.MIN_USIZE
MIN_UINT8 = _pyCovertAudio_lib.MIN_UINT8
MIN_UINT16 = _pyCovertAudio_lib.MIN_UINT16
MIN_UINT32 = _pyCovertAudio_lib.MIN_UINT32
MIN_UINT64 = _pyCovertAudio_lib.MIN_UINT64
CPC_ERROR_CODE_NO_ERROR = _pyCovertAudio_lib.CPC_ERROR_CODE_NO_ERROR
CPC_ERROR_CODE_NULL_POINTER = _pyCovertAudio_lib.CPC_ERROR_CODE_NULL_POINTER
CPC_ERROR_CODE_INVALID_LOG_LEVEL = _pyCovertAudio_lib.CPC_ERROR_CODE_INVALID_LOG_LEVEL
CPC_ERROR_CODE_MALLOC = _pyCovertAudio_lib.CPC_ERROR_CODE_MALLOC
CPC_ERROR_CODE_MEMSET = _pyCovertAudio_lib.CPC_ERROR_CODE_MEMSET
CPC_ERROR_CODE_APPLICATION_INTERRUPTED_IOS = _pyCovertAudio_lib.CPC_ERROR_CODE_APPLICATION_INTERRUPTED_IOS
CPC_ERROR_CODE_INVALID_PERMISSIONS = _pyCovertAudio_lib.CPC_ERROR_CODE_INVALID_PERMISSIONS
CPC_ERROR_CODE_INVALID_PARAMETER = _pyCovertAudio_lib.CPC_ERROR_CODE_INVALID_PARAMETER
CPC_ERROR_CODE_API_ERROR = _pyCovertAudio_lib.CPC_ERROR_CODE_API_ERROR
CPC_LOG_LEVEL_TRACE_STRING = _pyCovertAudio_lib.CPC_LOG_LEVEL_TRACE_STRING
CPC_LOG_LEVEL_DEBUG_STRING = _pyCovertAudio_lib.CPC_LOG_LEVEL_DEBUG_STRING
CPC_LOG_LEVEL_INFO_STRING = _pyCovertAudio_lib.CPC_LOG_LEVEL_INFO_STRING
CPC_LOG_LEVEL_WARN_STRING = _pyCovertAudio_lib.CPC_LOG_LEVEL_WARN_STRING
CPC_LOG_LEVEL_ERROR_STRING = _pyCovertAudio_lib.CPC_LOG_LEVEL_ERROR_STRING
CPC_LOG_LEVEL_NO_STRING = _pyCovertAudio_lib.CPC_LOG_LEVEL_NO_STRING
CPC_LOG_LEVEL_TRACE = _pyCovertAudio_lib.CPC_LOG_LEVEL_TRACE
CPC_LOG_LEVEL_DEBUG = _pyCovertAudio_lib.CPC_LOG_LEVEL_DEBUG
CPC_LOG_LEVEL_INFO = _pyCovertAudio_lib.CPC_LOG_LEVEL_INFO
CPC_LOG_LEVEL_WARN = _pyCovertAudio_lib.CPC_LOG_LEVEL_WARN
CPC_LOG_LEVEL_ERROR = _pyCovertAudio_lib.CPC_LOG_LEVEL_ERROR
CPC_LOG_LEVEL_NO_LOGGING = _pyCovertAudio_lib.CPC_LOG_LEVEL_NO_LOGGING

def cpc_log(*args):
  return _pyCovertAudio_lib.cpc_log(*args)
cpc_log = _pyCovertAudio_lib.cpc_log

def cpc_log_set_log_level(*args):
  return _pyCovertAudio_lib.cpc_log_set_log_level(*args)
cpc_log_set_log_level = _pyCovertAudio_lib.cpc_log_set_log_level

def cpc_log_get_current_log_level():
  return _pyCovertAudio_lib.cpc_log_get_current_log_level()
cpc_log_get_current_log_level = _pyCovertAudio_lib.cpc_log_get_current_log_level

def cpc_log_level_to_string(*args):
  return _pyCovertAudio_lib.cpc_log_level_to_string(*args)
cpc_log_level_to_string = _pyCovertAudio_lib.cpc_log_level_to_string

def cpc_log_buffer(*args):
  return _pyCovertAudio_lib.cpc_log_buffer(*args)
cpc_log_buffer = _pyCovertAudio_lib.cpc_log_buffer

def cpc_log_buffer_FLOAT32(*args):
  return _pyCovertAudio_lib.cpc_log_buffer_FLOAT32(*args)
cpc_log_buffer_FLOAT32 = _pyCovertAudio_lib.cpc_log_buffer_FLOAT32

def cpc_log_buffer_FLOAT64(*args):
  return _pyCovertAudio_lib.cpc_log_buffer_FLOAT64(*args)
cpc_log_buffer_FLOAT64 = _pyCovertAudio_lib.cpc_log_buffer_FLOAT64

def csignal_initialize():
  return _pyCovertAudio_lib.csignal_initialize()
csignal_initialize = _pyCovertAudio_lib.csignal_initialize

def csignal_terminate():
  return _pyCovertAudio_lib.csignal_terminate()
csignal_terminate = _pyCovertAudio_lib.csignal_terminate

def csignal_spread_signal(*args):
  return _pyCovertAudio_lib.csignal_spread_signal(*args)
csignal_spread_signal = _pyCovertAudio_lib.csignal_spread_signal

def csignal_multiply_signal(*args):
  return _pyCovertAudio_lib.csignal_multiply_signal(*args)
csignal_multiply_signal = _pyCovertAudio_lib.csignal_multiply_signal

def csignal_calculate_energy(*args):
  return _pyCovertAudio_lib.csignal_calculate_energy(*args)
csignal_calculate_energy = _pyCovertAudio_lib.csignal_calculate_energy

def csignal_sum_signal(*args):
  return _pyCovertAudio_lib.csignal_sum_signal(*args)
csignal_sum_signal = _pyCovertAudio_lib.csignal_sum_signal

def csignal_modulate_symbol(*args):
  return _pyCovertAudio_lib.csignal_modulate_symbol(*args)
csignal_modulate_symbol = _pyCovertAudio_lib.csignal_modulate_symbol

def csignal_modulate_BFSK_symbol(*args):
  return _pyCovertAudio_lib.csignal_modulate_BFSK_symbol(*args)
csignal_modulate_BFSK_symbol = _pyCovertAudio_lib.csignal_modulate_BFSK_symbol

def csignal_BFSK_determine_frequencies(*args):
  return _pyCovertAudio_lib.csignal_BFSK_determine_frequencies(*args)
csignal_BFSK_determine_frequencies = _pyCovertAudio_lib.csignal_BFSK_determine_frequencies
CSIGNAL_RIFF_HEADER_ID = _pyCovertAudio_lib.CSIGNAL_RIFF_HEADER_ID
CSIGNAL_RIFF_FILE_SIZE_BASE = _pyCovertAudio_lib.CSIGNAL_RIFF_FILE_SIZE_BASE
CSIGNAL_WAVE_HEADER_ID = _pyCovertAudio_lib.CSIGNAL_WAVE_HEADER_ID
CSIGNAL_WAVE_HEADER_CHUNK_FORMAT_ID = _pyCovertAudio_lib.CSIGNAL_WAVE_HEADER_CHUNK_FORMAT_ID
CSIGNAL_WAVE_HEADER_CHUNK_LPCM_FORMAT_SIZE = _pyCovertAudio_lib.CSIGNAL_WAVE_HEADER_CHUNK_LPCM_FORMAT_SIZE
CSIGNAL_WAVE_HEADER_CHUNK_FLOAT_FORMAT_SIZE = _pyCovertAudio_lib.CSIGNAL_WAVE_HEADER_CHUNK_FLOAT_FORMAT_SIZE
CSIGNAL_WAVE_HEADER_CHUNK_DATA_ID = _pyCovertAudio_lib.CSIGNAL_WAVE_HEADER_CHUNK_DATA_ID
CSIGNAL_WAVE_HEADER_FACT_ID = _pyCovertAudio_lib.CSIGNAL_WAVE_HEADER_FACT_ID
CSIGNAL_WAVE_HEADER_FACT_CHUNK_SIZE = _pyCovertAudio_lib.CSIGNAL_WAVE_HEADER_FACT_CHUNK_SIZE
CSIGNAL_WAVE_LPCM_FORMAT_CODE = _pyCovertAudio_lib.CSIGNAL_WAVE_LPCM_FORMAT_CODE
CSIGNAL_WAVE_FLOAT_FORMAT_CODE = _pyCovertAudio_lib.CSIGNAL_WAVE_FLOAT_FORMAT_CODE
CSIGNAL_SHORT_SAMPLE_SIZE = _pyCovertAudio_lib.CSIGNAL_SHORT_SAMPLE_SIZE
CSIGNAL_FLOAT_SAMPLE_SIZE = _pyCovertAudio_lib.CSIGNAL_FLOAT_SAMPLE_SIZE

def csignal_write_LPCM_wav(*args):
  return _pyCovertAudio_lib.csignal_write_LPCM_wav(*args)
csignal_write_LPCM_wav = _pyCovertAudio_lib.csignal_write_LPCM_wav

def csignal_write_FLOAT_wav(*args):
  return _pyCovertAudio_lib.csignal_write_FLOAT_wav(*args)
csignal_write_FLOAT_wav = _pyCovertAudio_lib.csignal_write_FLOAT_wav
SPREADING_WAVEFORM_POSITIVE = _pyCovertAudio_lib.SPREADING_WAVEFORM_POSITIVE
SPREADING_WAVEFORM_NEGATIVE = _pyCovertAudio_lib.SPREADING_WAVEFORM_NEGATIVE
class spreading_code(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spreading_code, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spreading_code, name)
    __repr__ = _swig_repr
    __swig_setmethods__["degree"] = _pyCovertAudio_lib.spreading_code_degree_set
    __swig_getmethods__["degree"] = _pyCovertAudio_lib.spreading_code_degree_get
    if _newclass:degree = _swig_property(_pyCovertAudio_lib.spreading_code_degree_get, _pyCovertAudio_lib.spreading_code_degree_set)
    __swig_setmethods__["generator_polynomial"] = _pyCovertAudio_lib.spreading_code_generator_polynomial_set
    __swig_getmethods__["generator_polynomial"] = _pyCovertAudio_lib.spreading_code_generator_polynomial_get
    if _newclass:generator_polynomial = _swig_property(_pyCovertAudio_lib.spreading_code_generator_polynomial_get, _pyCovertAudio_lib.spreading_code_generator_polynomial_set)
    __swig_setmethods__["state"] = _pyCovertAudio_lib.spreading_code_state_set
    __swig_getmethods__["state"] = _pyCovertAudio_lib.spreading_code_state_get
    if _newclass:state = _swig_property(_pyCovertAudio_lib.spreading_code_state_get, _pyCovertAudio_lib.spreading_code_state_set)
    __swig_setmethods__["initial_state"] = _pyCovertAudio_lib.spreading_code_initial_state_set
    __swig_getmethods__["initial_state"] = _pyCovertAudio_lib.spreading_code_initial_state_get
    if _newclass:initial_state = _swig_property(_pyCovertAudio_lib.spreading_code_initial_state_get, _pyCovertAudio_lib.spreading_code_initial_state_set)
    def __init__(self): 
        this = _pyCovertAudio_lib.new_spreading_code()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyCovertAudio_lib.delete_spreading_code
    __del__ = lambda self : None;
spreading_code_swigregister = _pyCovertAudio_lib.spreading_code_swigregister
spreading_code_swigregister(spreading_code)


def csignal_initialize_spreading_code(*args):
  return _pyCovertAudio_lib.csignal_initialize_spreading_code(*args)
csignal_initialize_spreading_code = _pyCovertAudio_lib.csignal_initialize_spreading_code

def csignal_get_spreading_code(*args):
  return _pyCovertAudio_lib.csignal_get_spreading_code(*args)
csignal_get_spreading_code = _pyCovertAudio_lib.csignal_get_spreading_code

def csignal_set_spreading_signal(*args):
  return _pyCovertAudio_lib.csignal_set_spreading_signal(*args)
csignal_set_spreading_signal = _pyCovertAudio_lib.csignal_set_spreading_signal

def csignal_destroy_spreading_code(*args):
  return _pyCovertAudio_lib.csignal_destroy_spreading_code(*args)
csignal_destroy_spreading_code = _pyCovertAudio_lib.csignal_destroy_spreading_code

def csignal_reset_spreading_code(*args):
  return _pyCovertAudio_lib.csignal_reset_spreading_code(*args)
csignal_reset_spreading_code = _pyCovertAudio_lib.csignal_reset_spreading_code
class gold_code(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gold_code, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gold_code, name)
    __repr__ = _swig_repr
    __swig_setmethods__["polynomials"] = _pyCovertAudio_lib.gold_code_polynomials_set
    __swig_getmethods__["polynomials"] = _pyCovertAudio_lib.gold_code_polynomials_get
    if _newclass:polynomials = _swig_property(_pyCovertAudio_lib.gold_code_polynomials_get, _pyCovertAudio_lib.gold_code_polynomials_set)
    def __init__(self): 
        this = _pyCovertAudio_lib.new_gold_code()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyCovertAudio_lib.delete_gold_code
    __del__ = lambda self : None;
gold_code_swigregister = _pyCovertAudio_lib.gold_code_swigregister
gold_code_swigregister(gold_code)


def csignal_initialize_gold_code(*args):
  return _pyCovertAudio_lib.csignal_initialize_gold_code(*args)
csignal_initialize_gold_code = _pyCovertAudio_lib.csignal_initialize_gold_code

def csignal_destroy_gold_code(*args):
  return _pyCovertAudio_lib.csignal_destroy_gold_code(*args)
csignal_destroy_gold_code = _pyCovertAudio_lib.csignal_destroy_gold_code

def csignal_get_gold_code(*args):
  return _pyCovertAudio_lib.csignal_get_gold_code(*args)
csignal_get_gold_code = _pyCovertAudio_lib.csignal_get_gold_code

def csignal_reset_gold_code(*args):
  return _pyCovertAudio_lib.csignal_reset_gold_code(*args)
csignal_reset_gold_code = _pyCovertAudio_lib.csignal_reset_gold_code
CSIGNAL_ERROR_CODE_NO_DATA = _pyCovertAudio_lib.CSIGNAL_ERROR_CODE_NO_DATA
CSIGNAL_ERROR_CODE_WRITE_ERROR = _pyCovertAudio_lib.CSIGNAL_ERROR_CODE_WRITE_ERROR
CSIGNAL_ERROR_CODE_LENGTH_MISMATCH = _pyCovertAudio_lib.CSIGNAL_ERROR_CODE_LENGTH_MISMATCH
CSIGNAL_ERROR_CODE_INVALID_TYPE = _pyCovertAudio_lib.CSIGNAL_ERROR_CODE_INVALID_TYPE
CSIGNAL_ERROR_CODE_NO_RESULT = _pyCovertAudio_lib.CSIGNAL_ERROR_CODE_NO_RESULT
class fir_passband_filter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fir_passband_filter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fir_passband_filter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["first_passband"] = _pyCovertAudio_lib.fir_passband_filter_first_passband_set
    __swig_getmethods__["first_passband"] = _pyCovertAudio_lib.fir_passband_filter_first_passband_get
    if _newclass:first_passband = _swig_property(_pyCovertAudio_lib.fir_passband_filter_first_passband_get, _pyCovertAudio_lib.fir_passband_filter_first_passband_set)
    __swig_setmethods__["second_passband"] = _pyCovertAudio_lib.fir_passband_filter_second_passband_set
    __swig_getmethods__["second_passband"] = _pyCovertAudio_lib.fir_passband_filter_second_passband_get
    if _newclass:second_passband = _swig_property(_pyCovertAudio_lib.fir_passband_filter_second_passband_get, _pyCovertAudio_lib.fir_passband_filter_second_passband_set)
    __swig_setmethods__["sampling_frequency"] = _pyCovertAudio_lib.fir_passband_filter_sampling_frequency_set
    __swig_getmethods__["sampling_frequency"] = _pyCovertAudio_lib.fir_passband_filter_sampling_frequency_get
    if _newclass:sampling_frequency = _swig_property(_pyCovertAudio_lib.fir_passband_filter_sampling_frequency_get, _pyCovertAudio_lib.fir_passband_filter_sampling_frequency_set)
    __swig_setmethods__["number_of_taps"] = _pyCovertAudio_lib.fir_passband_filter_number_of_taps_set
    __swig_getmethods__["number_of_taps"] = _pyCovertAudio_lib.fir_passband_filter_number_of_taps_get
    if _newclass:number_of_taps = _swig_property(_pyCovertAudio_lib.fir_passband_filter_number_of_taps_get, _pyCovertAudio_lib.fir_passband_filter_number_of_taps_set)
    __swig_setmethods__["coefficients"] = _pyCovertAudio_lib.fir_passband_filter_coefficients_set
    __swig_getmethods__["coefficients"] = _pyCovertAudio_lib.fir_passband_filter_coefficients_get
    if _newclass:coefficients = _swig_property(_pyCovertAudio_lib.fir_passband_filter_coefficients_get, _pyCovertAudio_lib.fir_passband_filter_coefficients_set)
    def __init__(self): 
        this = _pyCovertAudio_lib.new_fir_passband_filter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyCovertAudio_lib.delete_fir_passband_filter
    __del__ = lambda self : None;
fir_passband_filter_swigregister = _pyCovertAudio_lib.fir_passband_filter_swigregister
fir_passband_filter_swigregister(fir_passband_filter)


def csignal_initialize_passband_filter(*args):
  return _pyCovertAudio_lib.csignal_initialize_passband_filter(*args)
csignal_initialize_passband_filter = _pyCovertAudio_lib.csignal_initialize_passband_filter

def csignal_destroy_passband_filter(*args):
  return _pyCovertAudio_lib.csignal_destroy_passband_filter(*args)
csignal_destroy_passband_filter = _pyCovertAudio_lib.csignal_destroy_passband_filter

def csignal_filter_signal(*args):
  return _pyCovertAudio_lib.csignal_filter_signal(*args)
csignal_filter_signal = _pyCovertAudio_lib.csignal_filter_signal

def csignal_filter_get_group_delay(*args):
  return _pyCovertAudio_lib.csignal_filter_get_group_delay(*args)
csignal_filter_get_group_delay = _pyCovertAudio_lib.csignal_filter_get_group_delay

def csignal_filter_get_filter_length(*args):
  return _pyCovertAudio_lib.csignal_filter_get_filter_length(*args)
csignal_filter_get_filter_length = _pyCovertAudio_lib.csignal_filter_get_filter_length

def csignal_initialize_kaiser_filter(*args):
  return _pyCovertAudio_lib.csignal_initialize_kaiser_filter(*args)
csignal_initialize_kaiser_filter = _pyCovertAudio_lib.csignal_initialize_kaiser_filter

def csignal_inititalize_kaiser_lowpass_filter(*args):
  return _pyCovertAudio_lib.csignal_inititalize_kaiser_lowpass_filter(*args)
csignal_inititalize_kaiser_lowpass_filter = _pyCovertAudio_lib.csignal_inititalize_kaiser_lowpass_filter
BIT_PACKER_INITIAL_SIZE = _pyCovertAudio_lib.BIT_PACKER_INITIAL_SIZE
BIT_PACKER_GROWTH_RATE = _pyCovertAudio_lib.BIT_PACKER_GROWTH_RATE
class bit_packer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bit_packer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bit_packer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _pyCovertAudio_lib.bit_packer_data_set
    __swig_getmethods__["data"] = _pyCovertAudio_lib.bit_packer_data_get
    if _newclass:data = _swig_property(_pyCovertAudio_lib.bit_packer_data_get, _pyCovertAudio_lib.bit_packer_data_set)
    __swig_setmethods__["data_length"] = _pyCovertAudio_lib.bit_packer_data_length_set
    __swig_getmethods__["data_length"] = _pyCovertAudio_lib.bit_packer_data_length_get
    if _newclass:data_length = _swig_property(_pyCovertAudio_lib.bit_packer_data_length_get, _pyCovertAudio_lib.bit_packer_data_length_set)
    __swig_setmethods__["byte_offset"] = _pyCovertAudio_lib.bit_packer_byte_offset_set
    __swig_getmethods__["byte_offset"] = _pyCovertAudio_lib.bit_packer_byte_offset_get
    if _newclass:byte_offset = _swig_property(_pyCovertAudio_lib.bit_packer_byte_offset_get, _pyCovertAudio_lib.bit_packer_byte_offset_set)
    __swig_setmethods__["bit_offset"] = _pyCovertAudio_lib.bit_packer_bit_offset_set
    __swig_getmethods__["bit_offset"] = _pyCovertAudio_lib.bit_packer_bit_offset_get
    if _newclass:bit_offset = _swig_property(_pyCovertAudio_lib.bit_packer_bit_offset_get, _pyCovertAudio_lib.bit_packer_bit_offset_set)
    def __init__(self): 
        this = _pyCovertAudio_lib.new_bit_packer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyCovertAudio_lib.delete_bit_packer
    __del__ = lambda self : None;
bit_packer_swigregister = _pyCovertAudio_lib.bit_packer_swigregister
bit_packer_swigregister(bit_packer)


def bit_packer_initialize(*args):
  return _pyCovertAudio_lib.bit_packer_initialize(*args)
bit_packer_initialize = _pyCovertAudio_lib.bit_packer_initialize

def bit_packer_destroy(*args):
  return _pyCovertAudio_lib.bit_packer_destroy(*args)
bit_packer_destroy = _pyCovertAudio_lib.bit_packer_destroy

def bit_packer_add_bytes(*args):
  return _pyCovertAudio_lib.bit_packer_add_bytes(*args)
bit_packer_add_bytes = _pyCovertAudio_lib.bit_packer_add_bytes

def bit_packer_add_bits(*args):
  return _pyCovertAudio_lib.bit_packer_add_bits(*args)
bit_packer_add_bits = _pyCovertAudio_lib.bit_packer_add_bits

def bit_packer_get_bytes(*args):
  return _pyCovertAudio_lib.bit_packer_get_bytes(*args)
bit_packer_get_bytes = _pyCovertAudio_lib.bit_packer_get_bytes
class bit_stream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bit_stream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bit_stream, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bit_offset"] = _pyCovertAudio_lib.bit_stream_bit_offset_set
    __swig_getmethods__["bit_offset"] = _pyCovertAudio_lib.bit_stream_bit_offset_get
    if _newclass:bit_offset = _swig_property(_pyCovertAudio_lib.bit_stream_bit_offset_get, _pyCovertAudio_lib.bit_stream_bit_offset_set)
    __swig_setmethods__["byte_offset"] = _pyCovertAudio_lib.bit_stream_byte_offset_set
    __swig_getmethods__["byte_offset"] = _pyCovertAudio_lib.bit_stream_byte_offset_get
    if _newclass:byte_offset = _swig_property(_pyCovertAudio_lib.bit_stream_byte_offset_get, _pyCovertAudio_lib.bit_stream_byte_offset_set)
    __swig_setmethods__["circular"] = _pyCovertAudio_lib.bit_stream_circular_set
    __swig_getmethods__["circular"] = _pyCovertAudio_lib.bit_stream_circular_get
    if _newclass:circular = _swig_property(_pyCovertAudio_lib.bit_stream_circular_get, _pyCovertAudio_lib.bit_stream_circular_set)
    __swig_setmethods__["dirty_bit"] = _pyCovertAudio_lib.bit_stream_dirty_bit_set
    __swig_getmethods__["dirty_bit"] = _pyCovertAudio_lib.bit_stream_dirty_bit_get
    if _newclass:dirty_bit = _swig_property(_pyCovertAudio_lib.bit_stream_dirty_bit_get, _pyCovertAudio_lib.bit_stream_dirty_bit_set)
    __swig_setmethods__["packer"] = _pyCovertAudio_lib.bit_stream_packer_set
    __swig_getmethods__["packer"] = _pyCovertAudio_lib.bit_stream_packer_get
    if _newclass:packer = _swig_property(_pyCovertAudio_lib.bit_stream_packer_get, _pyCovertAudio_lib.bit_stream_packer_set)
    def __init__(self): 
        this = _pyCovertAudio_lib.new_bit_stream()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyCovertAudio_lib.delete_bit_stream
    __del__ = lambda self : None;
bit_stream_swigregister = _pyCovertAudio_lib.bit_stream_swigregister
bit_stream_swigregister(bit_stream)


def bit_stream_get_number_of_remaining_bits(*args):
  return _pyCovertAudio_lib.bit_stream_get_number_of_remaining_bits(*args)
bit_stream_get_number_of_remaining_bits = _pyCovertAudio_lib.bit_stream_get_number_of_remaining_bits

def bit_stream_initialize(*args):
  return _pyCovertAudio_lib.bit_stream_initialize(*args)
bit_stream_initialize = _pyCovertAudio_lib.bit_stream_initialize

def bit_stream_initialize_from_bit_packer(*args):
  return _pyCovertAudio_lib.bit_stream_initialize_from_bit_packer(*args)
bit_stream_initialize_from_bit_packer = _pyCovertAudio_lib.bit_stream_initialize_from_bit_packer

def bit_stream_destroy(*args):
  return _pyCovertAudio_lib.bit_stream_destroy(*args)
bit_stream_destroy = _pyCovertAudio_lib.bit_stream_destroy

def bit_stream_get_bits(*args):
  return _pyCovertAudio_lib.bit_stream_get_bits(*args)
bit_stream_get_bits = _pyCovertAudio_lib.bit_stream_get_bits

def bit_stream_peak(*args):
  return _pyCovertAudio_lib.bit_stream_peak(*args)
bit_stream_peak = _pyCovertAudio_lib.bit_stream_peak

def bit_stream_reset(*args):
  return _pyCovertAudio_lib.bit_stream_reset(*args)
bit_stream_reset = _pyCovertAudio_lib.bit_stream_reset

def new_doubleP():
  return _pyCovertAudio_lib.new_doubleP()
new_doubleP = _pyCovertAudio_lib.new_doubleP

def copy_doubleP(*args):
  return _pyCovertAudio_lib.copy_doubleP(*args)
copy_doubleP = _pyCovertAudio_lib.copy_doubleP

def delete_doubleP(*args):
  return _pyCovertAudio_lib.delete_doubleP(*args)
delete_doubleP = _pyCovertAudio_lib.delete_doubleP

def doubleP_assign(*args):
  return _pyCovertAudio_lib.doubleP_assign(*args)
doubleP_assign = _pyCovertAudio_lib.doubleP_assign

def doubleP_value(*args):
  return _pyCovertAudio_lib.doubleP_value(*args)
doubleP_value = _pyCovertAudio_lib.doubleP_value

def python_recorder_callback(*args):
  return _pyCovertAudio_lib.python_recorder_callback(*args)
python_recorder_callback = _pyCovertAudio_lib.python_recorder_callback

def python_playback_callback(*args):
  return _pyCovertAudio_lib.python_playback_callback(*args)
python_playback_callback = _pyCovertAudio_lib.python_playback_callback

def cahal_device_list_get(*args):
  return _pyCovertAudio_lib.cahal_device_list_get(*args)
cahal_device_list_get = _pyCovertAudio_lib.cahal_device_list_get

def cahal_device_stream_list_get(*args):
  return _pyCovertAudio_lib.cahal_device_stream_list_get(*args)
cahal_device_stream_list_get = _pyCovertAudio_lib.cahal_device_stream_list_get

def cahal_audio_format_description_list_get(*args):
  return _pyCovertAudio_lib.cahal_audio_format_description_list_get(*args)
cahal_audio_format_description_list_get = _pyCovertAudio_lib.cahal_audio_format_description_list_get

def cahal_sample_rate_range_list_get(*args):
  return _pyCovertAudio_lib.cahal_sample_rate_range_list_get(*args)
cahal_sample_rate_range_list_get = _pyCovertAudio_lib.cahal_sample_rate_range_list_get

def cahal_float_array_get(*args):
  return _pyCovertAudio_lib.cahal_float_array_get(*args)
cahal_float_array_get = _pyCovertAudio_lib.cahal_float_array_get

def start_recording(*args):
  return _pyCovertAudio_lib.start_recording(*args)
start_recording = _pyCovertAudio_lib.start_recording

def start_playback(*args):
  return _pyCovertAudio_lib.start_playback(*args)
start_playback = _pyCovertAudio_lib.start_playback

def python_cahal_initialize():
  return _pyCovertAudio_lib.python_cahal_initialize()
python_cahal_initialize = _pyCovertAudio_lib.python_cahal_initialize

def python_calculate_FFT(*args):
  return _pyCovertAudio_lib.python_calculate_FFT(*args)
python_calculate_FFT = _pyCovertAudio_lib.python_calculate_FFT

def python_filter_signal(*args):
  return _pyCovertAudio_lib.python_filter_signal(*args)
python_filter_signal = _pyCovertAudio_lib.python_filter_signal

def python_initialize_kaiser_filter(*args):
  return _pyCovertAudio_lib.python_initialize_kaiser_filter(*args)
python_initialize_kaiser_filter = _pyCovertAudio_lib.python_initialize_kaiser_filter

def python_initialize_kaiser_lowpass_filter(*args):
  return _pyCovertAudio_lib.python_initialize_kaiser_lowpass_filter(*args)
python_initialize_kaiser_lowpass_filter = _pyCovertAudio_lib.python_initialize_kaiser_lowpass_filter

def python_get_gold_code(*args):
  return _pyCovertAudio_lib.python_get_gold_code(*args)
python_get_gold_code = _pyCovertAudio_lib.python_get_gold_code

def python_initialize_gold_code(*args):
  return _pyCovertAudio_lib.python_initialize_gold_code(*args)
python_initialize_gold_code = _pyCovertAudio_lib.python_initialize_gold_code

def python_get_spreading_code(*args):
  return _pyCovertAudio_lib.python_get_spreading_code(*args)
python_get_spreading_code = _pyCovertAudio_lib.python_get_spreading_code

def python_initialize_spreading_code(*args):
  return _pyCovertAudio_lib.python_initialize_spreading_code(*args)
python_initialize_spreading_code = _pyCovertAudio_lib.python_initialize_spreading_code

def python_spread_signal(*args):
  return _pyCovertAudio_lib.python_spread_signal(*args)
python_spread_signal = _pyCovertAudio_lib.python_spread_signal

def python_write_FLOAT_wav(*args):
  return _pyCovertAudio_lib.python_write_FLOAT_wav(*args)
python_write_FLOAT_wav = _pyCovertAudio_lib.python_write_FLOAT_wav

def python_write_LPCM_wav(*args):
  return _pyCovertAudio_lib.python_write_LPCM_wav(*args)
python_write_LPCM_wav = _pyCovertAudio_lib.python_write_LPCM_wav

def python_modulate_symbol(*args):
  return _pyCovertAudio_lib.python_modulate_symbol(*args)
python_modulate_symbol = _pyCovertAudio_lib.python_modulate_symbol

def python_bit_packer_initialize():
  return _pyCovertAudio_lib.python_bit_packer_initialize()
python_bit_packer_initialize = _pyCovertAudio_lib.python_bit_packer_initialize

def python_bit_stream_initialize(*args):
  return _pyCovertAudio_lib.python_bit_stream_initialize(*args)
python_bit_stream_initialize = _pyCovertAudio_lib.python_bit_stream_initialize

def python_bit_stream_initialize_from_bit_packer(*args):
  return _pyCovertAudio_lib.python_bit_stream_initialize_from_bit_packer(*args)
python_bit_stream_initialize_from_bit_packer = _pyCovertAudio_lib.python_bit_stream_initialize_from_bit_packer

def python_bit_packer_add_bytes(*args):
  return _pyCovertAudio_lib.python_bit_packer_add_bytes(*args)
python_bit_packer_add_bytes = _pyCovertAudio_lib.python_bit_packer_add_bytes

def python_bit_packer_get_bytes(*args):
  return _pyCovertAudio_lib.python_bit_packer_get_bytes(*args)
python_bit_packer_get_bytes = _pyCovertAudio_lib.python_bit_packer_get_bytes

def python_bit_stream_get_bits(*args):
  return _pyCovertAudio_lib.python_bit_stream_get_bits(*args)
python_bit_stream_get_bits = _pyCovertAudio_lib.python_bit_stream_get_bits

def python_convolve(*args):
  return _pyCovertAudio_lib.python_convolve(*args)
python_convolve = _pyCovertAudio_lib.python_convolve

def python_csignal_multiply_signals(*args):
  return _pyCovertAudio_lib.python_csignal_multiply_signals(*args)
python_csignal_multiply_signals = _pyCovertAudio_lib.python_csignal_multiply_signals

def python_csignal_calculate_energy(*args):
  return _pyCovertAudio_lib.python_csignal_calculate_energy(*args)
python_csignal_calculate_energy = _pyCovertAudio_lib.python_csignal_calculate_energy

def python_csignal_sum_signal(*args):
  return _pyCovertAudio_lib.python_csignal_sum_signal(*args)
python_csignal_sum_signal = _pyCovertAudio_lib.python_csignal_sum_signal

def python_bit_stream_peak(*args):
  return _pyCovertAudio_lib.python_bit_stream_peak(*args)
python_bit_stream_peak = _pyCovertAudio_lib.python_bit_stream_peak

def python_filter_get_group_delay(*args):
  return _pyCovertAudio_lib.python_filter_get_group_delay(*args)
python_filter_get_group_delay = _pyCovertAudio_lib.python_filter_get_group_delay

def python_csignal_modulate_BFSK_symbol(*args):
  return _pyCovertAudio_lib.python_csignal_modulate_BFSK_symbol(*args)
python_csignal_modulate_BFSK_symbol = _pyCovertAudio_lib.python_csignal_modulate_BFSK_symbol

def python_detect_calculate_energy(*args):
  return _pyCovertAudio_lib.python_detect_calculate_energy(*args)
python_detect_calculate_energy = _pyCovertAudio_lib.python_detect_calculate_energy

def python_detect_find_highest_energy_offset(*args):
  return _pyCovertAudio_lib.python_detect_find_highest_energy_offset(*args)
python_detect_find_highest_energy_offset = _pyCovertAudio_lib.python_detect_find_highest_energy_offset

def python_BFSK_determine_frequencies(*args):
  return _pyCovertAudio_lib.python_BFSK_determine_frequencies(*args)
python_BFSK_determine_frequencies = _pyCovertAudio_lib.python_BFSK_determine_frequencies

def python_filter_get_filter_length(*args):
  return _pyCovertAudio_lib.python_filter_get_filter_length(*args)
python_filter_get_filter_length = _pyCovertAudio_lib.python_filter_get_filter_length

def python_calculate_IFFT(*args):
  return _pyCovertAudio_lib.python_calculate_IFFT(*args)
python_calculate_IFFT = _pyCovertAudio_lib.python_calculate_IFFT
# This file is compatible with both classic and new-style classes.


