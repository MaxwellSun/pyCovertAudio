# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_csignal_tests', [dirname(__file__)])
        except ImportError:
            import _csignal_tests
            return _csignal_tests
        if fp is not None:
            try:
                _mod = imp.load_module('_csignal_tests', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _csignal_tests = swig_import_helper()
    del swig_import_helper
else:
    import _csignal_tests
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def csignal_initialize():
    return _csignal_tests.csignal_initialize()
csignal_initialize = _csignal_tests.csignal_initialize

def csignal_terminate():
    return _csignal_tests.csignal_terminate()
csignal_terminate = _csignal_tests.csignal_terminate

def csignal_spread_signal(io_gold_code, in_chip_duration, in_signal_size, io_signal):
    return _csignal_tests.csignal_spread_signal(io_gold_code, in_chip_duration, in_signal_size, io_signal)
csignal_spread_signal = _csignal_tests.csignal_spread_signal

def csignal_multiply_signal(in_signal_one_length, in_signal_one, in_signal_two_length, in_signal_two, out_signal_length, out_signal):
    return _csignal_tests.csignal_multiply_signal(in_signal_one_length, in_signal_one, in_signal_two_length, in_signal_two, out_signal_length, out_signal)
csignal_multiply_signal = _csignal_tests.csignal_multiply_signal

def csignal_calculate_energy(in_signal_length, in_signal, out_energy):
    return _csignal_tests.csignal_calculate_energy(in_signal_length, in_signal, out_energy)
csignal_calculate_energy = _csignal_tests.csignal_calculate_energy

def csignal_sum_signal(in_signal_length, in_signal, in_scalar, out_sum):
    return _csignal_tests.csignal_sum_signal(in_signal_length, in_signal, in_scalar, out_sum)
csignal_sum_signal = _csignal_tests.csignal_sum_signal

def csignal_modulate_symbol(in_symbol, in_constellation_size, out_symbol_inphase, out_symbol_quadrature):
    return _csignal_tests.csignal_modulate_symbol(in_symbol, in_constellation_size, out_symbol_inphase, out_symbol_quadrature)
csignal_modulate_symbol = _csignal_tests.csignal_modulate_symbol

def csignal_modulate_BFSK_symbol(in_symbol, in_samples_per_symbol, in_sample_rate, in_carrier_frequency, in_separation_intervals, in_symbol_expansion_factor, out_signal_length, out_signal_inphase, out_signal_quadrature):
    return _csignal_tests.csignal_modulate_BFSK_symbol(in_symbol, in_samples_per_symbol, in_sample_rate, in_carrier_frequency, in_separation_intervals, in_symbol_expansion_factor, out_signal_length, out_signal_inphase, out_signal_quadrature)
csignal_modulate_BFSK_symbol = _csignal_tests.csignal_modulate_BFSK_symbol

def csignal_BFSK_determine_frequencies(in_samples_per_symbol, in_sample_rate, in_carrier_frequency, in_separation_intervals, out_symbol_0_frequency, out_symbol_1_frequency, out_delta_frequency, out_bandwidth):
    return _csignal_tests.csignal_BFSK_determine_frequencies(in_samples_per_symbol, in_sample_rate, in_carrier_frequency, in_separation_intervals, out_symbol_0_frequency, out_symbol_1_frequency, out_delta_frequency, out_bandwidth)
csignal_BFSK_determine_frequencies = _csignal_tests.csignal_BFSK_determine_frequencies

_csignal_tests.CSIGNAL_RIFF_HEADER_ID_swigconstant(_csignal_tests)
CSIGNAL_RIFF_HEADER_ID = _csignal_tests.CSIGNAL_RIFF_HEADER_ID

_csignal_tests.CSIGNAL_RIFF_FILE_SIZE_BASE_swigconstant(_csignal_tests)
CSIGNAL_RIFF_FILE_SIZE_BASE = _csignal_tests.CSIGNAL_RIFF_FILE_SIZE_BASE

_csignal_tests.CSIGNAL_WAVE_HEADER_ID_swigconstant(_csignal_tests)
CSIGNAL_WAVE_HEADER_ID = _csignal_tests.CSIGNAL_WAVE_HEADER_ID

_csignal_tests.CSIGNAL_WAVE_HEADER_CHUNK_FORMAT_ID_swigconstant(_csignal_tests)
CSIGNAL_WAVE_HEADER_CHUNK_FORMAT_ID = _csignal_tests.CSIGNAL_WAVE_HEADER_CHUNK_FORMAT_ID

_csignal_tests.CSIGNAL_WAVE_HEADER_CHUNK_LPCM_FORMAT_SIZE_swigconstant(_csignal_tests)
CSIGNAL_WAVE_HEADER_CHUNK_LPCM_FORMAT_SIZE = _csignal_tests.CSIGNAL_WAVE_HEADER_CHUNK_LPCM_FORMAT_SIZE

_csignal_tests.CSIGNAL_WAVE_HEADER_CHUNK_FLOAT_FORMAT_SIZE_swigconstant(_csignal_tests)
CSIGNAL_WAVE_HEADER_CHUNK_FLOAT_FORMAT_SIZE = _csignal_tests.CSIGNAL_WAVE_HEADER_CHUNK_FLOAT_FORMAT_SIZE

_csignal_tests.CSIGNAL_WAVE_HEADER_CHUNK_DATA_ID_swigconstant(_csignal_tests)
CSIGNAL_WAVE_HEADER_CHUNK_DATA_ID = _csignal_tests.CSIGNAL_WAVE_HEADER_CHUNK_DATA_ID

_csignal_tests.CSIGNAL_WAVE_HEADER_FACT_ID_swigconstant(_csignal_tests)
CSIGNAL_WAVE_HEADER_FACT_ID = _csignal_tests.CSIGNAL_WAVE_HEADER_FACT_ID

_csignal_tests.CSIGNAL_WAVE_HEADER_FACT_CHUNK_SIZE_swigconstant(_csignal_tests)
CSIGNAL_WAVE_HEADER_FACT_CHUNK_SIZE = _csignal_tests.CSIGNAL_WAVE_HEADER_FACT_CHUNK_SIZE

_csignal_tests.CSIGNAL_WAVE_LPCM_FORMAT_CODE_swigconstant(_csignal_tests)
CSIGNAL_WAVE_LPCM_FORMAT_CODE = _csignal_tests.CSIGNAL_WAVE_LPCM_FORMAT_CODE

_csignal_tests.CSIGNAL_WAVE_FLOAT_FORMAT_CODE_swigconstant(_csignal_tests)
CSIGNAL_WAVE_FLOAT_FORMAT_CODE = _csignal_tests.CSIGNAL_WAVE_FLOAT_FORMAT_CODE

_csignal_tests.CSIGNAL_SHORT_SAMPLE_SIZE_swigconstant(_csignal_tests)
CSIGNAL_SHORT_SAMPLE_SIZE = _csignal_tests.CSIGNAL_SHORT_SAMPLE_SIZE

_csignal_tests.CSIGNAL_FLOAT_SAMPLE_SIZE_swigconstant(_csignal_tests)
CSIGNAL_FLOAT_SAMPLE_SIZE = _csignal_tests.CSIGNAL_FLOAT_SAMPLE_SIZE

def csignal_write_LPCM_wav(in_file_name, in_number_of_channels, in_sample_rate, in_number_of_samples, in_samples):
    return _csignal_tests.csignal_write_LPCM_wav(in_file_name, in_number_of_channels, in_sample_rate, in_number_of_samples, in_samples)
csignal_write_LPCM_wav = _csignal_tests.csignal_write_LPCM_wav

def csignal_write_FLOAT_wav(in_file_name, in_number_of_channels, in_sample_rate, in_number_of_samples, in_samples):
    return _csignal_tests.csignal_write_FLOAT_wav(in_file_name, in_number_of_channels, in_sample_rate, in_number_of_samples, in_samples)
csignal_write_FLOAT_wav = _csignal_tests.csignal_write_FLOAT_wav

_csignal_tests.SPREADING_WAVEFORM_POSITIVE_swigconstant(_csignal_tests)
SPREADING_WAVEFORM_POSITIVE = _csignal_tests.SPREADING_WAVEFORM_POSITIVE

_csignal_tests.SPREADING_WAVEFORM_NEGATIVE_swigconstant(_csignal_tests)
SPREADING_WAVEFORM_NEGATIVE = _csignal_tests.SPREADING_WAVEFORM_NEGATIVE
class spreading_code(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spreading_code, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spreading_code, name)
    __repr__ = _swig_repr
    __swig_setmethods__["degree"] = _csignal_tests.spreading_code_degree_set
    __swig_getmethods__["degree"] = _csignal_tests.spreading_code_degree_get
    if _newclass:
        degree = _swig_property(_csignal_tests.spreading_code_degree_get, _csignal_tests.spreading_code_degree_set)
    __swig_setmethods__["generator_polynomial"] = _csignal_tests.spreading_code_generator_polynomial_set
    __swig_getmethods__["generator_polynomial"] = _csignal_tests.spreading_code_generator_polynomial_get
    if _newclass:
        generator_polynomial = _swig_property(_csignal_tests.spreading_code_generator_polynomial_get, _csignal_tests.spreading_code_generator_polynomial_set)
    __swig_setmethods__["state"] = _csignal_tests.spreading_code_state_set
    __swig_getmethods__["state"] = _csignal_tests.spreading_code_state_get
    if _newclass:
        state = _swig_property(_csignal_tests.spreading_code_state_get, _csignal_tests.spreading_code_state_set)
    __swig_setmethods__["initial_state"] = _csignal_tests.spreading_code_initial_state_set
    __swig_getmethods__["initial_state"] = _csignal_tests.spreading_code_initial_state_get
    if _newclass:
        initial_state = _swig_property(_csignal_tests.spreading_code_initial_state_get, _csignal_tests.spreading_code_initial_state_set)

    def __init__(self):
        this = _csignal_tests.new_spreading_code()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _csignal_tests.delete_spreading_code
    __del__ = lambda self: None
spreading_code_swigregister = _csignal_tests.spreading_code_swigregister
spreading_code_swigregister(spreading_code)


def csignal_initialize_spreading_code(in_degree, in_generator_polynomial, in_initial_state, out_spreading_code):
    return _csignal_tests.csignal_initialize_spreading_code(in_degree, in_generator_polynomial, in_initial_state, out_spreading_code)
csignal_initialize_spreading_code = _csignal_tests.csignal_initialize_spreading_code

def csignal_get_spreading_code(in_spreading_code, in_number_of_code_bits, out_size, out_code):
    return _csignal_tests.csignal_get_spreading_code(in_spreading_code, in_number_of_code_bits, out_size, out_code)
csignal_get_spreading_code = _csignal_tests.csignal_get_spreading_code

def csignal_set_spreading_signal(in_bit, in_signal_size, out_signal):
    return _csignal_tests.csignal_set_spreading_signal(in_bit, in_signal_size, out_signal)
csignal_set_spreading_signal = _csignal_tests.csignal_set_spreading_signal

def csignal_destroy_spreading_code(io_spreading_code):
    return _csignal_tests.csignal_destroy_spreading_code(io_spreading_code)
csignal_destroy_spreading_code = _csignal_tests.csignal_destroy_spreading_code

def csignal_reset_spreading_code(io_spreading_code):
    return _csignal_tests.csignal_reset_spreading_code(io_spreading_code)
csignal_reset_spreading_code = _csignal_tests.csignal_reset_spreading_code
class gold_code(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gold_code, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gold_code, name)
    __repr__ = _swig_repr
    __swig_setmethods__["polynomials"] = _csignal_tests.gold_code_polynomials_set
    __swig_getmethods__["polynomials"] = _csignal_tests.gold_code_polynomials_get
    if _newclass:
        polynomials = _swig_property(_csignal_tests.gold_code_polynomials_get, _csignal_tests.gold_code_polynomials_set)

    def __init__(self):
        this = _csignal_tests.new_gold_code()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _csignal_tests.delete_gold_code
    __del__ = lambda self: None
gold_code_swigregister = _csignal_tests.gold_code_swigregister
gold_code_swigregister(gold_code)


def csignal_initialize_gold_code(in_degree, in_generator_polynomial_1, in_generator_polynomial_2, in_initial_state_1, in_initial_state_2, out_gold_code):
    return _csignal_tests.csignal_initialize_gold_code(in_degree, in_generator_polynomial_1, in_generator_polynomial_2, in_initial_state_1, in_initial_state_2, out_gold_code)
csignal_initialize_gold_code = _csignal_tests.csignal_initialize_gold_code

def csignal_destroy_gold_code(io_gold_code):
    return _csignal_tests.csignal_destroy_gold_code(io_gold_code)
csignal_destroy_gold_code = _csignal_tests.csignal_destroy_gold_code

def csignal_get_gold_code(in_gold_code, in_number_of_code_bits, out_size, out_code):
    return _csignal_tests.csignal_get_gold_code(in_gold_code, in_number_of_code_bits, out_size, out_code)
csignal_get_gold_code = _csignal_tests.csignal_get_gold_code

def csignal_reset_gold_code(io_gold_code):
    return _csignal_tests.csignal_reset_gold_code(io_gold_code)
csignal_reset_gold_code = _csignal_tests.csignal_reset_gold_code

_csignal_tests.CSIGNAL_ERROR_CODE_NO_DATA_swigconstant(_csignal_tests)
CSIGNAL_ERROR_CODE_NO_DATA = _csignal_tests.CSIGNAL_ERROR_CODE_NO_DATA

_csignal_tests.CSIGNAL_ERROR_CODE_WRITE_ERROR_swigconstant(_csignal_tests)
CSIGNAL_ERROR_CODE_WRITE_ERROR = _csignal_tests.CSIGNAL_ERROR_CODE_WRITE_ERROR

_csignal_tests.CSIGNAL_ERROR_CODE_LENGTH_MISMATCH_swigconstant(_csignal_tests)
CSIGNAL_ERROR_CODE_LENGTH_MISMATCH = _csignal_tests.CSIGNAL_ERROR_CODE_LENGTH_MISMATCH

_csignal_tests.CSIGNAL_ERROR_CODE_INVALID_TYPE_swigconstant(_csignal_tests)
CSIGNAL_ERROR_CODE_INVALID_TYPE = _csignal_tests.CSIGNAL_ERROR_CODE_INVALID_TYPE

_csignal_tests.CSIGNAL_ERROR_CODE_NO_RESULT_swigconstant(_csignal_tests)
CSIGNAL_ERROR_CODE_NO_RESULT = _csignal_tests.CSIGNAL_ERROR_CODE_NO_RESULT
class fir_passband_filter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fir_passband_filter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fir_passband_filter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["first_passband"] = _csignal_tests.fir_passband_filter_first_passband_set
    __swig_getmethods__["first_passband"] = _csignal_tests.fir_passband_filter_first_passband_get
    if _newclass:
        first_passband = _swig_property(_csignal_tests.fir_passband_filter_first_passband_get, _csignal_tests.fir_passband_filter_first_passband_set)
    __swig_setmethods__["second_passband"] = _csignal_tests.fir_passband_filter_second_passband_set
    __swig_getmethods__["second_passband"] = _csignal_tests.fir_passband_filter_second_passband_get
    if _newclass:
        second_passband = _swig_property(_csignal_tests.fir_passband_filter_second_passband_get, _csignal_tests.fir_passband_filter_second_passband_set)
    __swig_setmethods__["sampling_frequency"] = _csignal_tests.fir_passband_filter_sampling_frequency_set
    __swig_getmethods__["sampling_frequency"] = _csignal_tests.fir_passband_filter_sampling_frequency_get
    if _newclass:
        sampling_frequency = _swig_property(_csignal_tests.fir_passband_filter_sampling_frequency_get, _csignal_tests.fir_passband_filter_sampling_frequency_set)
    __swig_setmethods__["number_of_taps"] = _csignal_tests.fir_passband_filter_number_of_taps_set
    __swig_getmethods__["number_of_taps"] = _csignal_tests.fir_passband_filter_number_of_taps_get
    if _newclass:
        number_of_taps = _swig_property(_csignal_tests.fir_passband_filter_number_of_taps_get, _csignal_tests.fir_passband_filter_number_of_taps_set)
    __swig_setmethods__["coefficients"] = _csignal_tests.fir_passband_filter_coefficients_set
    __swig_getmethods__["coefficients"] = _csignal_tests.fir_passband_filter_coefficients_get
    if _newclass:
        coefficients = _swig_property(_csignal_tests.fir_passband_filter_coefficients_get, _csignal_tests.fir_passband_filter_coefficients_set)

    def __init__(self):
        this = _csignal_tests.new_fir_passband_filter()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _csignal_tests.delete_fir_passband_filter
    __del__ = lambda self: None
fir_passband_filter_swigregister = _csignal_tests.fir_passband_filter_swigregister
fir_passband_filter_swigregister(fir_passband_filter)


def csignal_initialize_passband_filter(in_first_passband, in_second_passband, in_sampling_frequency, in_number_of_taps, out_filter):
    return _csignal_tests.csignal_initialize_passband_filter(in_first_passband, in_second_passband, in_sampling_frequency, in_number_of_taps, out_filter)
csignal_initialize_passband_filter = _csignal_tests.csignal_initialize_passband_filter

def csignal_destroy_passband_filter(io_filter):
    return _csignal_tests.csignal_destroy_passband_filter(io_filter)
csignal_destroy_passband_filter = _csignal_tests.csignal_destroy_passband_filter

def csignal_filter_signal(in_filter, in_signal_length, in_signal, out_filtered_signal_length, out_filtered_signal):
    return _csignal_tests.csignal_filter_signal(in_filter, in_signal_length, in_signal, out_filtered_signal_length, out_filtered_signal)
csignal_filter_signal = _csignal_tests.csignal_filter_signal

def csignal_filter_get_group_delay(in_filter, out_group_delay):
    return _csignal_tests.csignal_filter_get_group_delay(in_filter, out_group_delay)
csignal_filter_get_group_delay = _csignal_tests.csignal_filter_get_group_delay

def csignal_filter_get_filter_length(in_filter, in_filter_length):
    return _csignal_tests.csignal_filter_get_filter_length(in_filter, in_filter_length)
csignal_filter_get_filter_length = _csignal_tests.csignal_filter_get_filter_length

def csignal_initialize_kaiser_filter(in_first_stopband, in_first_passband, in_second_passband, in_second_stopband, in_passband_attenuation, in_stopband_attenuation, in_sampling_frequency, out_filter):
    return _csignal_tests.csignal_initialize_kaiser_filter(in_first_stopband, in_first_passband, in_second_passband, in_second_stopband, in_passband_attenuation, in_stopband_attenuation, in_sampling_frequency, out_filter)
csignal_initialize_kaiser_filter = _csignal_tests.csignal_initialize_kaiser_filter

def csignal_inititalize_kaiser_lowpass_filter(in_passband, in_stopband, in_passband_attenuation, in_stopband_attenuation, in_sampling_frequency, out_filter):
    return _csignal_tests.csignal_inititalize_kaiser_lowpass_filter(in_passband, in_stopband, in_passband_attenuation, in_stopband_attenuation, in_sampling_frequency, out_filter)
csignal_inititalize_kaiser_lowpass_filter = _csignal_tests.csignal_inititalize_kaiser_lowpass_filter

_csignal_tests.BIT_PACKER_INITIAL_SIZE_swigconstant(_csignal_tests)
BIT_PACKER_INITIAL_SIZE = _csignal_tests.BIT_PACKER_INITIAL_SIZE

_csignal_tests.BIT_PACKER_GROWTH_RATE_swigconstant(_csignal_tests)
BIT_PACKER_GROWTH_RATE = _csignal_tests.BIT_PACKER_GROWTH_RATE
class bit_packer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bit_packer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bit_packer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _csignal_tests.bit_packer_data_set
    __swig_getmethods__["data"] = _csignal_tests.bit_packer_data_get
    if _newclass:
        data = _swig_property(_csignal_tests.bit_packer_data_get, _csignal_tests.bit_packer_data_set)
    __swig_setmethods__["data_length"] = _csignal_tests.bit_packer_data_length_set
    __swig_getmethods__["data_length"] = _csignal_tests.bit_packer_data_length_get
    if _newclass:
        data_length = _swig_property(_csignal_tests.bit_packer_data_length_get, _csignal_tests.bit_packer_data_length_set)
    __swig_setmethods__["byte_offset"] = _csignal_tests.bit_packer_byte_offset_set
    __swig_getmethods__["byte_offset"] = _csignal_tests.bit_packer_byte_offset_get
    if _newclass:
        byte_offset = _swig_property(_csignal_tests.bit_packer_byte_offset_get, _csignal_tests.bit_packer_byte_offset_set)
    __swig_setmethods__["bit_offset"] = _csignal_tests.bit_packer_bit_offset_set
    __swig_getmethods__["bit_offset"] = _csignal_tests.bit_packer_bit_offset_get
    if _newclass:
        bit_offset = _swig_property(_csignal_tests.bit_packer_bit_offset_get, _csignal_tests.bit_packer_bit_offset_set)

    def __init__(self):
        this = _csignal_tests.new_bit_packer()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _csignal_tests.delete_bit_packer
    __del__ = lambda self: None
bit_packer_swigregister = _csignal_tests.bit_packer_swigregister
bit_packer_swigregister(bit_packer)


def bit_packer_initialize(out_bit_packer):
    return _csignal_tests.bit_packer_initialize(out_bit_packer)
bit_packer_initialize = _csignal_tests.bit_packer_initialize

def bit_packer_destroy(in_bit_packer):
    return _csignal_tests.bit_packer_destroy(in_bit_packer)
bit_packer_destroy = _csignal_tests.bit_packer_destroy

def bit_packer_add_bytes(in_data, in_data_length, io_bit_packer):
    return _csignal_tests.bit_packer_add_bytes(in_data, in_data_length, io_bit_packer)
bit_packer_add_bytes = _csignal_tests.bit_packer_add_bytes

def bit_packer_add_bits(in_data, in_num_bits, io_bit_packer):
    return _csignal_tests.bit_packer_add_bits(in_data, in_num_bits, io_bit_packer)
bit_packer_add_bits = _csignal_tests.bit_packer_add_bits

def bit_packer_get_bytes(in_bit_packer, out_data, out_data_length):
    return _csignal_tests.bit_packer_get_bytes(in_bit_packer, out_data, out_data_length)
bit_packer_get_bytes = _csignal_tests.bit_packer_get_bytes
class bit_stream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bit_stream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bit_stream, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bit_offset"] = _csignal_tests.bit_stream_bit_offset_set
    __swig_getmethods__["bit_offset"] = _csignal_tests.bit_stream_bit_offset_get
    if _newclass:
        bit_offset = _swig_property(_csignal_tests.bit_stream_bit_offset_get, _csignal_tests.bit_stream_bit_offset_set)
    __swig_setmethods__["byte_offset"] = _csignal_tests.bit_stream_byte_offset_set
    __swig_getmethods__["byte_offset"] = _csignal_tests.bit_stream_byte_offset_get
    if _newclass:
        byte_offset = _swig_property(_csignal_tests.bit_stream_byte_offset_get, _csignal_tests.bit_stream_byte_offset_set)
    __swig_setmethods__["circular"] = _csignal_tests.bit_stream_circular_set
    __swig_getmethods__["circular"] = _csignal_tests.bit_stream_circular_get
    if _newclass:
        circular = _swig_property(_csignal_tests.bit_stream_circular_get, _csignal_tests.bit_stream_circular_set)
    __swig_setmethods__["dirty_bit"] = _csignal_tests.bit_stream_dirty_bit_set
    __swig_getmethods__["dirty_bit"] = _csignal_tests.bit_stream_dirty_bit_get
    if _newclass:
        dirty_bit = _swig_property(_csignal_tests.bit_stream_dirty_bit_get, _csignal_tests.bit_stream_dirty_bit_set)
    __swig_setmethods__["packer"] = _csignal_tests.bit_stream_packer_set
    __swig_getmethods__["packer"] = _csignal_tests.bit_stream_packer_get
    if _newclass:
        packer = _swig_property(_csignal_tests.bit_stream_packer_get, _csignal_tests.bit_stream_packer_set)

    def __init__(self):
        this = _csignal_tests.new_bit_stream()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _csignal_tests.delete_bit_stream
    __del__ = lambda self: None
bit_stream_swigregister = _csignal_tests.bit_stream_swigregister
bit_stream_swigregister(bit_stream)


def bit_stream_get_number_of_remaining_bits(in_bit_stream):
    return _csignal_tests.bit_stream_get_number_of_remaining_bits(in_bit_stream)
bit_stream_get_number_of_remaining_bits = _csignal_tests.bit_stream_get_number_of_remaining_bits

def bit_stream_initialize(in_circular, in_data, in_data_length, out_bit_stream):
    return _csignal_tests.bit_stream_initialize(in_circular, in_data, in_data_length, out_bit_stream)
bit_stream_initialize = _csignal_tests.bit_stream_initialize

def bit_stream_initialize_from_bit_packer(in_circular, in_bit_packer, out_bit_stream):
    return _csignal_tests.bit_stream_initialize_from_bit_packer(in_circular, in_bit_packer, out_bit_stream)
bit_stream_initialize_from_bit_packer = _csignal_tests.bit_stream_initialize_from_bit_packer

def bit_stream_destroy(io_bit_stream):
    return _csignal_tests.bit_stream_destroy(io_bit_stream)
bit_stream_destroy = _csignal_tests.bit_stream_destroy

def bit_stream_get_bits(io_bit_stream, io_num_bits, out_data, out_data_length):
    return _csignal_tests.bit_stream_get_bits(io_bit_stream, io_num_bits, out_data, out_data_length)
bit_stream_get_bits = _csignal_tests.bit_stream_get_bits

def bit_stream_peak(in_bit_stream, out_read_bit_offset, out_write_bit_offset, out_buffer_length, out_buffer):
    return _csignal_tests.bit_stream_peak(in_bit_stream, out_read_bit_offset, out_write_bit_offset, out_buffer_length, out_buffer)
bit_stream_peak = _csignal_tests.bit_stream_peak

def bit_stream_reset(io_bit_stream):
    return _csignal_tests.bit_stream_reset(io_bit_stream)
bit_stream_reset = _csignal_tests.bit_stream_reset

def csignal_calculate_closest_power_of_two(in_number):
    return _csignal_tests.csignal_calculate_closest_power_of_two(in_number)
csignal_calculate_closest_power_of_two = _csignal_tests.csignal_calculate_closest_power_of_two

def csignal_calculate_FFT(in_signal_length, in_signal, out_fft_length, out_fft):
    return _csignal_tests.csignal_calculate_FFT(in_signal_length, in_signal, out_fft_length, out_fft)
csignal_calculate_FFT = _csignal_tests.csignal_calculate_FFT

def csignal_calculate_IFFT(in_fft_length, in_fft, out_signal_length, out_signal):
    return _csignal_tests.csignal_calculate_IFFT(in_fft_length, in_fft, out_signal_length, out_signal)
csignal_calculate_IFFT = _csignal_tests.csignal_calculate_IFFT

def convolve(in_signal_one_length, in_signal_one, in_signal_two_length, in_signal_two, out_signal_length, out_signal):
    return _csignal_tests.convolve(in_signal_one_length, in_signal_one, in_signal_two_length, in_signal_two, out_signal_length, out_signal)
convolve = _csignal_tests.convolve

def detect_calculate_energy(in_signal_length, in_signal, in_spread_signal_length, in_spread_signal, in_narrowband_filter, in_lowpass_filter, out_energy):
    return _csignal_tests.detect_calculate_energy(in_signal_length, in_signal, in_spread_signal_length, in_spread_signal, in_narrowband_filter, in_lowpass_filter, out_energy)
detect_calculate_energy = _csignal_tests.detect_calculate_energy

def detect_find_highest_energy_offset(in_signal_length, in_signal, in_spreading_signal_length, in_spread_signal, in_number_of_tests, in_step_size, in_narrowband_filter, in_lowpass_filter, in_threshold, in_exhaustive_difference, in_exhaustive_decimation, out_offset):
    return _csignal_tests.detect_find_highest_energy_offset(in_signal_length, in_signal, in_spreading_signal_length, in_spread_signal, in_number_of_tests, in_step_size, in_narrowband_filter, in_lowpass_filter, in_threshold, in_exhaustive_difference, in_exhaustive_decimation, out_offset)
detect_find_highest_energy_offset = _csignal_tests.detect_find_highest_energy_offset

_csignal_tests.CPC_TRUE_swigconstant(_csignal_tests)
CPC_TRUE = _csignal_tests.CPC_TRUE

_csignal_tests.CPC_FALSE_swigconstant(_csignal_tests)
CPC_FALSE = _csignal_tests.CPC_FALSE

_csignal_tests.MIN_USIZE_swigconstant(_csignal_tests)
MIN_USIZE = _csignal_tests.MIN_USIZE

_csignal_tests.MIN_UINT8_swigconstant(_csignal_tests)
MIN_UINT8 = _csignal_tests.MIN_UINT8

_csignal_tests.MIN_UINT16_swigconstant(_csignal_tests)
MIN_UINT16 = _csignal_tests.MIN_UINT16

_csignal_tests.MIN_UINT32_swigconstant(_csignal_tests)
MIN_UINT32 = _csignal_tests.MIN_UINT32

_csignal_tests.MIN_UINT64_swigconstant(_csignal_tests)
MIN_UINT64 = _csignal_tests.MIN_UINT64

_csignal_tests.CPC_ERROR_CODE_NO_ERROR_swigconstant(_csignal_tests)
CPC_ERROR_CODE_NO_ERROR = _csignal_tests.CPC_ERROR_CODE_NO_ERROR

_csignal_tests.CPC_ERROR_CODE_NULL_POINTER_swigconstant(_csignal_tests)
CPC_ERROR_CODE_NULL_POINTER = _csignal_tests.CPC_ERROR_CODE_NULL_POINTER

_csignal_tests.CPC_ERROR_CODE_INVALID_LOG_LEVEL_swigconstant(_csignal_tests)
CPC_ERROR_CODE_INVALID_LOG_LEVEL = _csignal_tests.CPC_ERROR_CODE_INVALID_LOG_LEVEL

_csignal_tests.CPC_ERROR_CODE_MALLOC_swigconstant(_csignal_tests)
CPC_ERROR_CODE_MALLOC = _csignal_tests.CPC_ERROR_CODE_MALLOC

_csignal_tests.CPC_ERROR_CODE_MEMSET_swigconstant(_csignal_tests)
CPC_ERROR_CODE_MEMSET = _csignal_tests.CPC_ERROR_CODE_MEMSET

_csignal_tests.CPC_ERROR_CODE_APPLICATION_INTERRUPTED_IOS_swigconstant(_csignal_tests)
CPC_ERROR_CODE_APPLICATION_INTERRUPTED_IOS = _csignal_tests.CPC_ERROR_CODE_APPLICATION_INTERRUPTED_IOS

_csignal_tests.CPC_ERROR_CODE_INVALID_PERMISSIONS_swigconstant(_csignal_tests)
CPC_ERROR_CODE_INVALID_PERMISSIONS = _csignal_tests.CPC_ERROR_CODE_INVALID_PERMISSIONS

_csignal_tests.CPC_ERROR_CODE_INVALID_PARAMETER_swigconstant(_csignal_tests)
CPC_ERROR_CODE_INVALID_PARAMETER = _csignal_tests.CPC_ERROR_CODE_INVALID_PARAMETER

_csignal_tests.CPC_ERROR_CODE_API_ERROR_swigconstant(_csignal_tests)
CPC_ERROR_CODE_API_ERROR = _csignal_tests.CPC_ERROR_CODE_API_ERROR

_csignal_tests.CPC_LOG_LEVEL_TRACE_STRING_swigconstant(_csignal_tests)
CPC_LOG_LEVEL_TRACE_STRING = _csignal_tests.CPC_LOG_LEVEL_TRACE_STRING

_csignal_tests.CPC_LOG_LEVEL_DEBUG_STRING_swigconstant(_csignal_tests)
CPC_LOG_LEVEL_DEBUG_STRING = _csignal_tests.CPC_LOG_LEVEL_DEBUG_STRING

_csignal_tests.CPC_LOG_LEVEL_INFO_STRING_swigconstant(_csignal_tests)
CPC_LOG_LEVEL_INFO_STRING = _csignal_tests.CPC_LOG_LEVEL_INFO_STRING

_csignal_tests.CPC_LOG_LEVEL_WARN_STRING_swigconstant(_csignal_tests)
CPC_LOG_LEVEL_WARN_STRING = _csignal_tests.CPC_LOG_LEVEL_WARN_STRING

_csignal_tests.CPC_LOG_LEVEL_ERROR_STRING_swigconstant(_csignal_tests)
CPC_LOG_LEVEL_ERROR_STRING = _csignal_tests.CPC_LOG_LEVEL_ERROR_STRING

_csignal_tests.CPC_LOG_LEVEL_NO_STRING_swigconstant(_csignal_tests)
CPC_LOG_LEVEL_NO_STRING = _csignal_tests.CPC_LOG_LEVEL_NO_STRING

_csignal_tests.CPC_LOG_LEVEL_TRACE_swigconstant(_csignal_tests)
CPC_LOG_LEVEL_TRACE = _csignal_tests.CPC_LOG_LEVEL_TRACE

_csignal_tests.CPC_LOG_LEVEL_DEBUG_swigconstant(_csignal_tests)
CPC_LOG_LEVEL_DEBUG = _csignal_tests.CPC_LOG_LEVEL_DEBUG

_csignal_tests.CPC_LOG_LEVEL_INFO_swigconstant(_csignal_tests)
CPC_LOG_LEVEL_INFO = _csignal_tests.CPC_LOG_LEVEL_INFO

_csignal_tests.CPC_LOG_LEVEL_WARN_swigconstant(_csignal_tests)
CPC_LOG_LEVEL_WARN = _csignal_tests.CPC_LOG_LEVEL_WARN

_csignal_tests.CPC_LOG_LEVEL_ERROR_swigconstant(_csignal_tests)
CPC_LOG_LEVEL_ERROR = _csignal_tests.CPC_LOG_LEVEL_ERROR

_csignal_tests.CPC_LOG_LEVEL_NO_LOGGING_swigconstant(_csignal_tests)
CPC_LOG_LEVEL_NO_LOGGING = _csignal_tests.CPC_LOG_LEVEL_NO_LOGGING

def cpc_log(in_log_level, in_file, in_line_number, in_log_format):
    return _csignal_tests.cpc_log(in_log_level, in_file, in_line_number, in_log_format)
cpc_log = _csignal_tests.cpc_log

def cpc_log_set_log_level(in_new_log_level):
    return _csignal_tests.cpc_log_set_log_level(in_new_log_level)
cpc_log_set_log_level = _csignal_tests.cpc_log_set_log_level

def cpc_log_get_current_log_level():
    return _csignal_tests.cpc_log_get_current_log_level()
cpc_log_get_current_log_level = _csignal_tests.cpc_log_get_current_log_level

def cpc_log_level_to_string(in_log_level):
    return _csignal_tests.cpc_log_level_to_string(in_log_level)
cpc_log_level_to_string = _csignal_tests.cpc_log_level_to_string

def cpc_log_buffer(in_log_level, in_file, in_line_number, in_label, in_buffer, in_buffer_length, in_num_columns):
    return _csignal_tests.cpc_log_buffer(in_log_level, in_file, in_line_number, in_label, in_buffer, in_buffer_length, in_num_columns)
cpc_log_buffer = _csignal_tests.cpc_log_buffer

def cpc_log_buffer_FLOAT32(in_log_level, in_file, in_line_number, in_label, in_buffer, in_buffer_length, in_num_columns):
    return _csignal_tests.cpc_log_buffer_FLOAT32(in_log_level, in_file, in_line_number, in_label, in_buffer, in_buffer_length, in_num_columns)
cpc_log_buffer_FLOAT32 = _csignal_tests.cpc_log_buffer_FLOAT32

def cpc_log_buffer_FLOAT64(in_log_level, in_file, in_line_number, in_label, in_buffer, in_buffer_length, in_num_columns):
    return _csignal_tests.cpc_log_buffer_FLOAT64(in_log_level, in_file, in_line_number, in_label, in_buffer, in_buffer_length, in_num_columns)
cpc_log_buffer_FLOAT64 = _csignal_tests.cpc_log_buffer_FLOAT64

def new_doubleP():
    return _csignal_tests.new_doubleP()
new_doubleP = _csignal_tests.new_doubleP

def copy_doubleP(value):
    return _csignal_tests.copy_doubleP(value)
copy_doubleP = _csignal_tests.copy_doubleP

def delete_doubleP(obj):
    return _csignal_tests.delete_doubleP(obj)
delete_doubleP = _csignal_tests.delete_doubleP

def doubleP_assign(obj, value):
    return _csignal_tests.doubleP_assign(obj, value)
doubleP_assign = _csignal_tests.doubleP_assign

def doubleP_value(obj):
    return _csignal_tests.doubleP_value(obj)
doubleP_value = _csignal_tests.doubleP_value

def python_calculate_FFT(in_signal):
    return _csignal_tests.python_calculate_FFT(in_signal)
python_calculate_FFT = _csignal_tests.python_calculate_FFT

def python_filter_signal(in_filter, in_signal):
    return _csignal_tests.python_filter_signal(in_filter, in_signal)
python_filter_signal = _csignal_tests.python_filter_signal

def python_initialize_kaiser_filter(in_first_stopband, in_first_passband, in_second_passband, in_second_stopband, in_passband_attenuation, in_stopband_attenuation, in_sampling_frequency):
    return _csignal_tests.python_initialize_kaiser_filter(in_first_stopband, in_first_passband, in_second_passband, in_second_stopband, in_passband_attenuation, in_stopband_attenuation, in_sampling_frequency)
python_initialize_kaiser_filter = _csignal_tests.python_initialize_kaiser_filter

def python_initialize_kaiser_lowpass_filter(in_passband, in_stopband, in_passband_attenuation, in_stopband_attenuation, in_sampling_frequency):
    return _csignal_tests.python_initialize_kaiser_lowpass_filter(in_passband, in_stopband, in_passband_attenuation, in_stopband_attenuation, in_sampling_frequency)
python_initialize_kaiser_lowpass_filter = _csignal_tests.python_initialize_kaiser_lowpass_filter

def python_get_gold_code(in_gold_code, in_number_of_bits):
    return _csignal_tests.python_get_gold_code(in_gold_code, in_number_of_bits)
python_get_gold_code = _csignal_tests.python_get_gold_code

def python_initialize_gold_code(in_degree, in_generator_polynomial_1, in_generator_polynomial_2, in_initial_state_1, in_initial_state_2):
    return _csignal_tests.python_initialize_gold_code(in_degree, in_generator_polynomial_1, in_generator_polynomial_2, in_initial_state_1, in_initial_state_2)
python_initialize_gold_code = _csignal_tests.python_initialize_gold_code

def python_get_spreading_code(in_spreading_code, in_number_of_bits):
    return _csignal_tests.python_get_spreading_code(in_spreading_code, in_number_of_bits)
python_get_spreading_code = _csignal_tests.python_get_spreading_code

def python_initialize_spreading_code(in_degree, in_generator_polynomial, in_initial_state):
    return _csignal_tests.python_initialize_spreading_code(in_degree, in_generator_polynomial, in_initial_state)
python_initialize_spreading_code = _csignal_tests.python_initialize_spreading_code

def python_spread_signal(io_gold_code, in_chip_duration, in_signal):
    return _csignal_tests.python_spread_signal(io_gold_code, in_chip_duration, in_signal)
python_spread_signal = _csignal_tests.python_spread_signal

def python_write_FLOAT_wav(in_file_name, in_number_of_channels, in_sample_rate, in_number_of_samples, in_samples):
    return _csignal_tests.python_write_FLOAT_wav(in_file_name, in_number_of_channels, in_sample_rate, in_number_of_samples, in_samples)
python_write_FLOAT_wav = _csignal_tests.python_write_FLOAT_wav

def python_write_LPCM_wav(in_file_name, in_number_of_channels, in_sample_rate, in_number_of_samples, in_samples):
    return _csignal_tests.python_write_LPCM_wav(in_file_name, in_number_of_channels, in_sample_rate, in_number_of_samples, in_samples)
python_write_LPCM_wav = _csignal_tests.python_write_LPCM_wav

def python_modulate_symbol(in_symbol, in_constellation_size):
    return _csignal_tests.python_modulate_symbol(in_symbol, in_constellation_size)
python_modulate_symbol = _csignal_tests.python_modulate_symbol

def python_bit_packer_initialize():
    return _csignal_tests.python_bit_packer_initialize()
python_bit_packer_initialize = _csignal_tests.python_bit_packer_initialize

def python_bit_stream_initialize(in_circular, in_data):
    return _csignal_tests.python_bit_stream_initialize(in_circular, in_data)
python_bit_stream_initialize = _csignal_tests.python_bit_stream_initialize

def python_bit_stream_initialize_from_bit_packer(in_circular, in_bit_packer):
    return _csignal_tests.python_bit_stream_initialize_from_bit_packer(in_circular, in_bit_packer)
python_bit_stream_initialize_from_bit_packer = _csignal_tests.python_bit_stream_initialize_from_bit_packer

def python_bit_packer_add_bytes(in_data, io_bit_packer):
    return _csignal_tests.python_bit_packer_add_bytes(in_data, io_bit_packer)
python_bit_packer_add_bytes = _csignal_tests.python_bit_packer_add_bytes

def python_bit_packer_get_bytes(in_bit_packer):
    return _csignal_tests.python_bit_packer_get_bytes(in_bit_packer)
python_bit_packer_get_bytes = _csignal_tests.python_bit_packer_get_bytes

def python_bit_stream_get_bits(io_bit_stream, in_number):
    return _csignal_tests.python_bit_stream_get_bits(io_bit_stream, in_number)
python_bit_stream_get_bits = _csignal_tests.python_bit_stream_get_bits

def python_convolve(in_signal_one, in_signal_two):
    return _csignal_tests.python_convolve(in_signal_one, in_signal_two)
python_convolve = _csignal_tests.python_convolve

def python_csignal_multiply_signals(in_signal_one, in_signal_two):
    return _csignal_tests.python_csignal_multiply_signals(in_signal_one, in_signal_two)
python_csignal_multiply_signals = _csignal_tests.python_csignal_multiply_signals

def python_csignal_calculate_energy(in_signal):
    return _csignal_tests.python_csignal_calculate_energy(in_signal)
python_csignal_calculate_energy = _csignal_tests.python_csignal_calculate_energy

def python_csignal_sum_signal(in_signal, in_scalar):
    return _csignal_tests.python_csignal_sum_signal(in_signal, in_scalar)
python_csignal_sum_signal = _csignal_tests.python_csignal_sum_signal

def python_bit_stream_peak(in_bit_stream):
    return _csignal_tests.python_bit_stream_peak(in_bit_stream)
python_bit_stream_peak = _csignal_tests.python_bit_stream_peak

def python_filter_get_group_delay(in_filter):
    return _csignal_tests.python_filter_get_group_delay(in_filter)
python_filter_get_group_delay = _csignal_tests.python_filter_get_group_delay

def python_csignal_modulate_BFSK_symbol(in_symbol, in_samples_per_symbol, in_sample_rate, in_carrier_frequency, in_separation_intervals, in_symbol_expansion_factor):
    return _csignal_tests.python_csignal_modulate_BFSK_symbol(in_symbol, in_samples_per_symbol, in_sample_rate, in_carrier_frequency, in_separation_intervals, in_symbol_expansion_factor)
python_csignal_modulate_BFSK_symbol = _csignal_tests.python_csignal_modulate_BFSK_symbol

def python_detect_calculate_energy(in_signal, in_spread_signal, in_narrowband_filter, in_lowpass_filter):
    return _csignal_tests.python_detect_calculate_energy(in_signal, in_spread_signal, in_narrowband_filter, in_lowpass_filter)
python_detect_calculate_energy = _csignal_tests.python_detect_calculate_energy

def python_detect_find_highest_energy_offset(in_signal, in_spread_signal, in_number_of_tests, in_step_size, in_narrowband_filter, in_lowpass_filter, in_exhaustive_difference, in_exhaustive_decimation, in_threshold):
    return _csignal_tests.python_detect_find_highest_energy_offset(in_signal, in_spread_signal, in_number_of_tests, in_step_size, in_narrowband_filter, in_lowpass_filter, in_exhaustive_difference, in_exhaustive_decimation, in_threshold)
python_detect_find_highest_energy_offset = _csignal_tests.python_detect_find_highest_energy_offset

def python_BFSK_determine_frequencies(in_samples_per_symbol, in_sample_rate, in_carrier_frequency, in_separation_intervals):
    return _csignal_tests.python_BFSK_determine_frequencies(in_samples_per_symbol, in_sample_rate, in_carrier_frequency, in_separation_intervals)
python_BFSK_determine_frequencies = _csignal_tests.python_BFSK_determine_frequencies

def python_filter_get_filter_length(in_filter):
    return _csignal_tests.python_filter_get_filter_length(in_filter)
python_filter_get_filter_length = _csignal_tests.python_filter_get_filter_length

def python_calculate_IFFT(in_fft):
    return _csignal_tests.python_calculate_IFFT(in_fft)
python_calculate_IFFT = _csignal_tests.python_calculate_IFFT
# This file is compatible with both classic and new-style classes.


